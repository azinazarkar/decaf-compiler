package compiler.Parser;
import java_cup.runtime.*;
import compiler.Scanner.MyScanner;
import compiler.CodeGenerator.SymbolTable.*;
import compiler.CodeGenerator.Exceptions.*;
import compiler.CodeGenerator.SymbolTable.Utility.*;
import compiler.CodeGenerator.*;
import compiler.CodeGenerator.CodeGen.*;


parser code {:
	private MyScanner scanner;
	public parser (MyScanner scanner){
		this.scanner = scanner;
	}
:}
scan with {: return scanner.next_token(); :}
// defining terminals here
// arithmetic operators
terminal        PLUS, MINUS, MULTIPLY, DIVIDE, MOD, UMINUS,
				LESS, LESSEQUAL, GREATER, GREATEREQUAL, EQUAL, NOTEQUAL;
// logical operators
terminal	    AND, OR, NOT;
// dot
terminal        DOT;
// types
terminal        String INT, DOUBLE, BOOL, STRING;

// literals
terminal        String DECIMAL;
terminal        String FLOATINGPOINT;
terminal        String BOOLEANLITERAL;
terminal        String STRINGLITERAL;
terminal        NULL;

// signs
terminal		OPENBRACKET, CLOSEBRACKET, OPENCLOSEBRACKET, WS, OPENPARENTHESIS,
				CLOSEPARENTHESIS, OPENCURLYBRACES, CLOSECURLYBRACES;
// keywords
terminal        READINTEGER, READLINE, NEW, NEWARRAY, ITOD, DTOI, ITOB, BTOI,
				VOID, CLASS, INTERFACE,
				EXTENDS, IMPLEMENTS, COMMA, SEMICOLON, PRIVATE, PROTECTED, PUBLIC, IF, ELSE, WHILE, FOR, RETURN,
				BREAK, CONTINUE, PRINT, ASSIGN, THIS;
terminal        String IDENTIFIER;

// defining nonterminals
nonterminal     Program, DeclStar, Decl, VariableDecl, Variable, FunctionDecl, Formals, CommaVariables,
				ClassDecl, ClassDeclExtends, ClassDeclImplements, CommaIdentifiers, FieldStar, Field,
				AccessMode, InterfaceDecl, PrototypeStar, Prototype, StmtBlock, InsideStmtBlock, VariableDeclStar, StmtStar,
				Stmt, ExprPrime, IfStmt, ElsePrime, WhileStmt, ForStmt, ReturnStmt, BreakStmt, ContinueStmt, PrintStmt,
				CommaExpr, Call, Actuals;
// non-terminals with type
nonterminal     String Type;
nonterminal     Descriptor Constant, LValue;
nonterminal     Descriptor Expr;

// defining precedences
precedence left     ELSE;
precedence right    ASSIGN;
precedence left     OR;
precedence left     AND;
precedence left     EQUAL, NOTEQUAL;
precedence left     LESS, LESSEQUAL, GREATER, GREATEREQUAL;
precedence left     PLUS, MINUS;
precedence left     MULTIPLY, DIVIDE, MOD;
precedence right    NOT, UMINUS;
precedence left     DOT, OPENBRACKET;
precedence left     OPENPARENTHESIS;

start with Program;

Program ::=             Decl DeclStar;

DeclStar ::=            Decl DeclStar
						| /*epsilon*/
						;

Decl ::=                VariableDecl
						| FunctionDecl
						| ClassDecl
						| InterfaceDecl
						;

VariableDecl ::=        Variable SEMICOLON;

Variable ::=            Type:t IDENTIFIER:id {:
							String name = IDGenerator.getInstance().getNextID();
							Type type = Descriptor.getType( t );
							SymbolTable.getInstance().getSymbolTable().addEntry(
								id,
								new Descriptor( name, type, null )
							);

							CodeGen.getInstance().addToData( name, Type.getMipsType( type ), Integer.toString( 0 ) );
						:}
						;

Type ::=                INT {: RESULT = "INT"; :}
						| DOUBLE {: RESULT = "DOUBLE"; :}
						| BOOL {: RESULT = "BOOL"; :}
						| STRING {: RESULT = "STRING"; :}
						| IDENTIFIER:e {: RESULT = e; :}
						| Type OPENCLOSEBRACKET {: RESULT = "ARRAY"; :}
						;

FunctionDecl ::=        Type:t IDENTIFIER:name OPENPARENTHESIS {:
							CodeGen.getInstance().addToText( name + ":\n", true );
							SymbolTable.getInstance().makeNextAndSwitch( name );
						:}
						Formals {:
							SymbolTable.getInstance().makeNextAndSwitch();
						:} CLOSEPARENTHESIS StmtBlock {:
							SymbolTable.getInstance().goBack();
							SymbolTable.getInstance().goBack();
							CodeGen.getInstance().addToText( "" );
						:}
						| VOID IDENTIFIER OPENPARENTHESIS Formals CLOSEPARENTHESIS StmtBlock
						;

Formals ::=             Variable:v CommaVariables
						| /*epsilon*/
						;
CommaVariables ::=      COMMA Variable CommaVariables
						| /*epsilon*/
						;

ClassDecl ::=           CLASS IDENTIFIER ClassDeclExtends ClassDeclImplements OPENCURLYBRACES FieldStar CLOSECURLYBRACES;
ClassDeclExtends ::=    EXTENDS IDENTIFIER
						| /*epsilon*/
						;
ClassDeclImplements ::= IMPLEMENTS IDENTIFIER CommaIdentifiers
						| /*epsilon*/
						;
CommaIdentifiers ::=    COMMA IDENTIFIER CommaIdentifiers
						| /*epsilon*/
						;
FieldStar ::=           Field FieldStar
						| /*epsilon*/
						;

Field ::=               AccessMode VariableDecl
						| AccessMode FunctionDecl
						;

AccessMode ::=          PRIVATE
						| PROTECTED
						| PUBLIC
						| /*epsilon*/
						;

InterfaceDecl ::=       INTERFACE IDENTIFIER OPENCURLYBRACES PrototypeStar CLOSECURLYBRACES;
PrototypeStar ::=       Prototype PrototypeStar
						| /*epsilon*/
						;

Prototype ::=           Type IDENTIFIER OPENPARENTHESIS Formals CLOSEPARENTHESIS SEMICOLON
						| VOID IDENTIFIER OPENPARENTHESIS Formals CLOSEPARENTHESIS SEMICOLON
						;

StmtBlock ::=           OPENCURLYBRACES InsideStmtBlock CLOSECURLYBRACES;
InsideStmtBlock ::=     VariableDecl InsideStmtBlock
						| StmtStar
						;
StmtStar ::=            Stmt StmtStar
						| /*epsilon*/
						;

Stmt ::=                ExprPrime SEMICOLON
						| IfStmt
						| WhileStmt
						| ForStmt
						| BreakStmt
						| ContinueStmt
						| ReturnStmt
						| PrintStmt
						| StmtBlock
						;

ExprPrime ::=           Expr
						| /*epsilon*/
						;

IfStmt ::=              IF OPENPARENTHESIS Expr CLOSEPARENTHESIS Stmt ElsePrime;
ElsePrime ::=           ELSE Stmt
						| /*epsilon*/
						;

WhileStmt ::=           WHILE OPENPARENTHESIS Expr CLOSEPARENTHESIS Stmt;

ForStmt ::=             FOR OPENPARENTHESIS ExprPrime SEMICOLON Expr SEMICOLON ExprPrime CLOSEPARENTHESIS Stmt;

ReturnStmt ::=          RETURN ExprPrime SEMICOLON;

BreakStmt ::=           BREAK SEMICOLON;

ContinueStmt ::=        CONTINUE SEMICOLON;

PrintStmt ::=           PRINT OPENPARENTHESIS Expr CommaExpr CLOSEPARENTHESIS SEMICOLON;

CommaExpr ::=           COMMA Expr CommaExpr
						| /*epsilon*/
						;

Expr ::=                LValue:lv ASSIGN Expr:e {:
							if ( lv.getType() != e.getType() )
								throw new AssignmentTypeMismatch( lv.getType(), e.getType() );
							lv.setValue( e.getValue() );
							SemanticStack.getInstance().pushDescriptor( e );
							SemanticStack.getInstance().pushDescriptor( lv );
							AssignmentCodeGen.getInstance().cgen();
//							if ( e.getType().toString().equals( "INT" ) )
//								CodeGen.getInstance().addToText( "lw " + "$a0, " + e.getName() );
//							else
//								System.out.println( "I DONT KNOW" );
//							CodeGen.getInstance().addToText( "la " + "$a1, " + lv.getName() );
//							CodeGen.getInstance().addToText( "move $a2, $a0" );
//							CodeGen.getInstance().addToText( "sw $a2, 0($a1)" );
							RESULT = new Descriptor( "", Type.DUMMY, 0 );
						:}
						|
						Constant:c {:
							SymbolTable.getInstance().getSymbolTable().addEntry( c.getName(), c );
							CodeGen.getInstance().addToData( c.getName(), Type.getMipsType( c.getType() ), c.getValue().toString() );
							RESULT = c;
						:}
						| LValue:lv {: RESULT = lv; :}
						| THIS
						| Call
						| OPENPARENTHESIS Expr CLOSEPARENTHESIS
						| Expr:e1 PLUS Expr:e2 {:
							if ( e1.getType() != e2.getType() )
								throw new CalculationTypeMismatch( "+", e1.getType(), e2.getType() );
							if ( e1.getType().toString().equals( "INT" ) ) {
								Descriptor temp = new Descriptor(
									"_" + IDGenerator.getInstance().getNextID(),
									Type.INT,
									(int) e1.getValue() + (int) e2.getValue() );
								SymbolTable.getInstance().getSymbolTable().addEntry( temp.getName(), temp );
								CodeGen.getInstance().addToData( temp.getName(), Type.getMipsType( temp.getType() ), temp.getValue().toString() );
								CodeGen.getInstance().addToText( "lw " + "$a0, " + e1.getName() );
								CodeGen.getInstance().addToText( "lw " + "$a1, " + e2.getName() );
								CodeGen.getInstance().addToText( "add $t0, $a0, $a1" );
								CodeGen.getInstance().addToText( "la " + "$a2, " + temp.getName() );
								CodeGen.getInstance().addToText( "sw $t0, 0($a2)" );
								RESULT = temp;
							}
						:}
						| Expr MINUS Expr
						| Expr MULTIPLY Expr
						| Expr DIVIDE Expr
						| Expr MOD Expr
						| MINUS Expr %prec UMINUS
						| Expr LESS Expr
						| Expr LESSEQUAL Expr
						| Expr GREATER Expr
						| Expr GREATEREQUAL Expr
						| Expr EQUAL Expr
						| Expr NOTEQUAL Expr
						| Expr AND Expr
						| Expr OR Expr
						| NOT Expr
						| READINTEGER OPENPARENTHESIS CLOSEPARENTHESIS
						| READLINE OPENPARENTHESIS CLOSEPARENTHESIS
						| NEW IDENTIFIER
						| NEWARRAY OPENPARENTHESIS Expr COMMA Type CLOSEPARENTHESIS
						| ITOD OPENPARENTHESIS Expr CLOSEPARENTHESIS
						| DTOI OPENPARENTHESIS Expr CLOSEPARENTHESIS
						| ITOB OPENPARENTHESIS Expr CLOSEPARENTHESIS
						| BTOI OPENPARENTHESIS Expr CLOSEPARENTHESIS
						;

LValue ::=              IDENTIFIER:id {:
							RESULT = SymbolTable.getInstance().getSymbolTable().getDescriptor( id );
						:}
						| Expr DOT IDENTIFIER
						| Expr OPENBRACKET Expr CLOSEBRACKET
						;

Call ::=                IDENTIFIER OPENPARENTHESIS Actuals CLOSEPARENTHESIS
						| Expr DOT IDENTIFIER OPENPARENTHESIS Actuals CLOSEPARENTHESIS
						;

Actuals ::=             Expr CommaExpr
						| /*epsilon*/
						;

Constant ::=            DECIMAL:d {: RESULT = new Descriptor( "_" + IDGenerator.getInstance().getNextID(), Type.INT, Integer.parseInt( d ) ); :}
						| FLOATINGPOINT:f {: RESULT = new Descriptor( "_" + IDGenerator.getInstance().getNextID(), Type.DOUBLE, f ); :}
						| BOOLEANLITERAL:b {: RESULT = new Descriptor( "_" + IDGenerator.getInstance().getNextID(), Type.BOOL, b ); :}
						| STRINGLITERAL:s {: RESULT = new Descriptor( "_" + IDGenerator.getInstance().getNextID(), Type.STRING, s ); :}
						| NULL:n {: RESULT = new Descriptor( "_" + IDGenerator.getInstance().getNextID(), Type.NULL, 0 ); :}
						;

