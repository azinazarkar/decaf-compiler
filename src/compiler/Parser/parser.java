
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.Parser;

import java_cup.runtime.*;
import compiler.Scanner.MyScanner;
import compiler.CodeGenerator.SymbolTable.*;
import compiler.CodeGenerator.Exceptions.SemanticErrors.*;
import compiler.CodeGenerator.SymbolTable.Utility.*;
import compiler.CodeGenerator.*;
import compiler.CodeGenerator.CodeGen.*;
import compiler.CodeGenerator.SymbolTable.Utility.*;
import compiler.Parser.Utility.ParserHelper;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\004\000" +
    "\002\006\004\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\004\000\002\052\002\000\002\053\002\000\002\007\012" +
    "\000\002\054\002\000\002\055\002\000\002\007\012\000" +
    "\002\010\004\000\002\010\002\000\002\011\005\000\002" +
    "\011\002\000\002\012\011\000\002\013\004\000\002\013" +
    "\002\000\002\014\005\000\002\014\002\000\002\015\005" +
    "\000\002\015\002\000\002\016\004\000\002\016\002\000" +
    "\002\017\004\000\002\017\004\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\002\000\002\021" +
    "\007\000\002\022\004\000\002\022\002\000\002\023\010" +
    "\000\002\023\010\000\002\056\002\000\002\057\002\000" +
    "\002\024\007\000\002\025\004\000\002\025\003\000\002" +
    "\027\004\000\002\027\002\000\002\030\004\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\003\000\002\031\002\000\002" +
    "\060\002\000\002\061\002\000\002\032\012\000\002\062" +
    "\002\000\002\033\005\000\002\033\002\000\002\063\002" +
    "\000\002\064\002\000\002\034\011\000\002\035\013\000" +
    "\002\036\005\000\002\037\004\000\002\040\004\000\002" +
    "\065\002\000\002\041\011\000\002\066\002\000\002\042" +
    "\006\000\002\042\002\000\002\047\005\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\005\000\002\047\005\000\002\047\005\000\002" +
    "\047\005\000\002\047\005\000\002\047\005\000\002\047" +
    "\004\000\002\047\005\000\002\047\005\000\002\047\005" +
    "\000\002\047\005\000\002\047\005\000\002\047\005\000" +
    "\002\047\005\000\002\047\005\000\002\047\004\000\002" +
    "\047\005\000\002\047\005\000\002\047\004\000\002\047" +
    "\010\000\002\047\006\000\002\047\006\000\002\047\006" +
    "\000\002\047\006\000\002\046\003\000\002\046\005\000" +
    "\002\046\006\000\002\067\002\000\002\051\007\000\002" +
    "\070\002\000\002\051\011\000\002\071\002\000\002\044" +
    "\005\000\002\044\002\000\002\072\002\000\002\043\006" +
    "\000\002\043\002\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\022\024\007\025\017\026\013\027\016\055" +
    "\014\056\023\057\020\101\021\001\002\000\006\037\075" +
    "\101\362\001\002\000\024\002\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\055\ufffa\056\ufffa\057\ufffa\101\ufffa\001\002" +
    "\000\024\002\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\055" +
    "\ufffd\056\ufffd\057\ufffd\101\ufffd\001\002\000\010\037\ufff7" +
    "\042\ufff7\101\ufff7\001\002\000\024\002\ufffe\024\007\025" +
    "\017\026\013\027\016\055\014\056\023\057\020\101\021" +
    "\001\002\000\004\063\356\001\002\000\004\002\355\001" +
    "\002\000\010\037\ufff5\042\ufff5\101\ufff5\001\002\000\004" +
    "\101\104\001\002\000\024\002\ufffb\024\ufffb\025\ufffb\026" +
    "\ufffb\027\ufffb\055\ufffb\056\ufffb\057\ufffb\101\ufffb\001\002" +
    "\000\010\037\ufff4\042\ufff4\101\ufff4\001\002\000\010\037" +
    "\ufff6\042\ufff6\101\ufff6\001\002\000\004\101\052\001\002" +
    "\000\010\037\ufff3\042\ufff3\101\ufff3\001\002\000\024\002" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\055\ufffc\056\ufffc" +
    "\057\ufffc\101\ufffc\001\002\000\004\101\024\001\002\000" +
    "\010\043\uffe5\060\025\061\uffe5\001\002\000\004\101\051" +
    "\001\002\000\006\043\uffe3\061\030\001\002\000\004\043" +
    "\036\001\002\000\004\101\031\001\002\000\006\043\uffe1" +
    "\062\032\001\002\000\004\101\034\001\002\000\004\043" +
    "\uffe4\001\002\000\006\043\uffe1\062\032\001\002\000\004" +
    "\043\uffe2\001\002\000\026\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\044\uffdf\055\uffd9\064\044\065\037\066\043\101\uffd9" +
    "\001\002\000\016\024\uffdb\025\uffdb\026\uffdb\027\uffdb\055" +
    "\uffdb\101\uffdb\001\002\000\004\044\050\001\002\000\026" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\044\uffdf\055\uffd9\064" +
    "\044\065\037\066\043\101\uffd9\001\002\000\016\024\007" +
    "\025\017\026\013\027\016\055\014\101\021\001\002\000" +
    "\016\024\uffda\025\uffda\026\uffda\027\uffda\055\uffda\101\uffda" +
    "\001\002\000\016\024\uffdc\025\uffdc\026\uffdc\027\uffdc\055" +
    "\uffdc\101\uffdc\001\002\000\026\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\044\uffde\055\uffde\064\uffde\065\uffde\066\uffde\101" +
    "\uffde\001\002\000\026\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\044\uffdd\055\uffdd\064\uffdd\065\uffdd\066\uffdd\101\uffdd\001" +
    "\002\000\004\044\uffe0\001\002\000\024\002\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\055\uffe7\056\uffe7\057\uffe7\101" +
    "\uffe7\001\002\000\006\043\uffe6\061\uffe6\001\002\000\004" +
    "\043\053\001\002\000\020\024\007\025\017\026\013\027" +
    "\016\044\uffd6\055\056\101\021\001\002\000\006\037\075" +
    "\101\077\001\002\000\004\044\076\001\002\000\004\101" +
    "\061\001\002\000\020\024\007\025\017\026\013\027\016" +
    "\044\uffd6\055\056\101\021\001\002\000\004\044\uffd7\001" +
    "\002\000\004\041\062\001\002\000\016\024\007\025\017" +
    "\026\013\027\016\042\uffea\101\021\001\002\000\006\037" +
    "\075\101\074\001\002\000\006\042\uffe8\062\071\001\002" +
    "\000\004\042\066\001\002\000\004\063\067\001\002\000" +
    "\020\024\uffd4\025\uffd4\026\uffd4\027\uffd4\044\uffd4\055\uffd4" +
    "\101\uffd4\001\002\000\004\042\uffeb\001\002\000\014\024" +
    "\007\025\017\026\013\027\016\101\021\001\002\000\006" +
    "\042\uffe8\062\071\001\002\000\004\042\uffe9\001\002\000" +
    "\010\042\ufff8\062\ufff8\063\ufff8\001\002\000\010\037\ufff2" +
    "\042\ufff2\101\ufff2\001\002\000\024\002\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\055\uffd8\056\uffd8\057\uffd8\101\uffd8" +
    "\001\002\000\004\041\100\001\002\000\016\024\007\025" +
    "\017\026\013\027\016\042\uffea\101\021\001\002\000\004" +
    "\042\102\001\002\000\004\063\103\001\002\000\020\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\044\uffd5\055\uffd5\101\uffd5" +
    "\001\002\000\004\041\105\001\002\000\016\024\uffee\025" +
    "\uffee\026\uffee\027\uffee\042\uffee\101\uffee\001\002\000\016" +
    "\024\007\025\017\026\013\027\016\042\uffea\101\021\001" +
    "\002\000\004\042\uffed\001\002\000\004\042\111\001\002" +
    "\000\004\043\112\001\002\000\102\005\uffd3\022\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\041\uffd3\043\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3" +
    "\063\uffd3\067\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075" +
    "\uffd3\076\uffd3\100\uffd3\101\uffd3\001\002\000\034\002\uffec" +
    "\024\uffec\025\uffec\026\uffec\027\uffec\044\uffec\055\uffec\056" +
    "\uffec\057\uffec\064\uffec\065\uffec\066\uffec\101\uffec\001\002" +
    "\000\102\005\130\022\132\024\007\025\017\026\013\027" +
    "\016\030\140\031\122\032\121\033\161\034\144\041\151" +
    "\043\112\044\uffcd\045\133\046\117\047\142\050\134\051" +
    "\152\052\147\053\154\054\157\063\uffc2\067\136\071\153" +
    "\072\127\073\141\074\145\075\126\076\165\100\137\101" +
    "\166\001\002\000\074\005\uffc6\022\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\041\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\054\uffc6\063\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073" +
    "\uffc6\074\uffc6\075\uffc6\076\uffc6\100\uffc6\101\uffc6\001\002" +
    "\000\004\063\354\001\002\000\004\041\352\001\002\000" +
    "\004\044\uffcf\001\002\000\050\004\uff83\005\uff83\006\uff83" +
    "\007\uff83\010\uff83\012\uff83\013\uff83\014\uff83\015\uff83\016" +
    "\uff83\017\uff83\020\uff83\021\uff83\023\uff83\035\uff83\036\uff83" +
    "\042\uff83\062\uff83\063\uff83\001\002\000\050\004\uff84\005" +
    "\uff84\006\uff84\007\uff84\010\uff84\012\uff84\013\uff84\014\uff84" +
    "\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\023\uff84\035" +
    "\uff84\036\uff84\042\uff84\062\uff84\063\uff84\001\002\000\050" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\012\uffae\013" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae" +
    "\023\uffae\035\uffae\036\uffae\042\uffae\062\uffae\063\uffae\001" +
    "\002\000\074\005\uffc9\022\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\041\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\063\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074" +
    "\uffc9\075\uffc9\076\uffc9\100\uffc9\101\uffc9\001\002\000\074" +
    "\005\uffc5\022\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\041\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\063\uffc5\067" +
    "\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5" +
    "\076\uffc5\100\uffc5\101\uffc5\001\002\000\004\063\351\001" +
    "\002\000\004\041\341\001\002\000\046\005\130\022\132" +
    "\030\140\031\122\032\121\033\161\034\144\041\151\045" +
    "\133\046\117\047\142\050\134\051\152\052\147\053\154" +
    "\054\157\100\137\101\171\001\002\000\004\044\uffd2\001" +
    "\002\000\046\005\130\022\132\030\140\031\122\032\121" +
    "\033\161\034\144\041\151\045\133\046\117\047\142\050" +
    "\134\051\152\052\147\053\154\054\157\100\137\101\171" +
    "\001\002\000\004\041\333\001\002\000\004\041\326\001" +
    "\002\000\074\005\uffca\022\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\041\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\063\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074" +
    "\uffca\075\uffca\076\uffca\100\uffca\101\uffca\001\002\000\004" +
    "\041\314\001\002\000\050\004\uffac\005\uffac\006\uffac\007" +
    "\uffac\010\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\023\uffac\035\uffac\036\uffac\042" +
    "\uffac\062\uffac\063\uffac\001\002\000\050\004\uff85\005\uff85" +
    "\006\uff85\007\uff85\010\uff85\012\uff85\013\uff85\014\uff85\015" +
    "\uff85\016\uff85\017\uff85\020\uff85\021\uff85\023\uff85\035\uff85" +
    "\036\uff85\042\uff85\062\uff85\063\uff85\001\002\000\050\005" +
    "\130\022\132\030\140\031\122\032\121\033\161\034\144" +
    "\041\151\045\133\046\117\047\142\050\134\051\152\052" +
    "\147\053\154\054\157\063\uffc2\100\137\101\171\001\002" +
    "\000\004\101\311\001\002\000\074\005\uffc4\022\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\041\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\063\uffc4\067\uffc4\070\uffc4\071\uffc4" +
    "\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\100\uffc4\101" +
    "\uffc4\001\002\000\050\004\uff81\005\uff81\006\uff81\007\uff81" +
    "\010\uff81\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81\017" +
    "\uff81\020\uff81\021\uff81\023\uff81\035\uff81\036\uff81\042\uff81" +
    "\062\uff81\063\uff81\001\002\000\004\063\310\001\002\000" +
    "\074\005\uffcb\022\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\041\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\063\uffcb" +
    "\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075" +
    "\uffcb\076\uffcb\100\uffcb\101\uffcb\001\002\000\004\041\305" +
    "\001\002\000\044\004\205\005\174\006\200\007\177\010" +
    "\201\012\210\013\203\014\202\015\212\016\204\017\176" +
    "\020\175\021\213\023\207\035\206\042\uffc3\063\uffc3\001" +
    "\002\000\046\005\130\022\132\030\140\031\122\032\121" +
    "\033\161\034\144\041\151\045\133\046\117\047\142\050" +
    "\134\051\152\052\147\053\154\054\157\100\137\101\171" +
    "\001\002\000\004\041\300\001\002\000\004\041\uffbb\001" +
    "\002\000\004\041\267\001\002\000\052\004\uffad\005\uffad" +
    "\006\uffad\007\uffad\010\uffad\012\uffad\013\uffad\014\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\023\uffad\035\uffad" +
    "\036\uffad\042\uffad\062\uffad\063\uffad\077\265\001\002\000" +
    "\102\005\130\022\132\024\007\025\017\026\013\027\016" +
    "\030\140\031\122\032\121\033\161\034\144\041\151\043" +
    "\112\044\uffcd\045\133\046\117\047\142\050\134\051\152" +
    "\052\147\053\154\054\157\063\uffc2\067\136\071\153\072" +
    "\127\073\141\074\145\075\126\076\165\100\137\101\166" +
    "\001\002\000\004\041\261\001\002\000\072\005\130\022" +
    "\132\030\140\031\122\032\121\033\161\034\144\041\151" +
    "\043\112\044\uffcd\045\133\046\117\047\142\050\134\051" +
    "\152\052\147\053\154\054\157\063\uffc2\067\136\071\153" +
    "\072\127\073\141\074\145\075\126\076\165\100\137\101" +
    "\171\001\002\000\050\004\uff82\005\uff82\006\uff82\007\uff82" +
    "\010\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017" +
    "\uff82\020\uff82\021\uff82\023\uff82\035\uff82\036\uff82\042\uff82" +
    "\062\uff82\063\uff82\001\002\000\050\004\uffab\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\012\uffab\013\uffab\014\uffab\015\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\023\uffab\035\uffab\036" +
    "\uffab\042\uffab\062\uffab\063\uffab\001\002\000\074\005\uffc7" +
    "\022\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\041" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\063\uffc7\067\uffc7\070" +
    "\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7" +
    "\100\uffc7\101\uffc7\001\002\000\074\005\uffc8\022\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\041\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\063\uffc8\067\uffc8\070\uffc8\071\uffc8" +
    "\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\100\uffc8\101" +
    "\uffc8\001\002\000\004\041\246\001\002\000\052\004\uff92" +
    "\005\uff92\006\uff92\007\uff92\010\uff92\012\uff92\013\uff92\014" +
    "\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\023\uff92" +
    "\035\uff92\037\ufff3\041\167\063\uff92\077\uff92\101\ufff3\001" +
    "\002\000\050\005\uff8f\022\uff8f\030\uff8f\031\uff8f\032\uff8f" +
    "\033\uff8f\034\uff8f\041\uff8f\042\uff8f\045\uff8f\046\uff8f\047" +
    "\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\100\uff8f" +
    "\101\uff8f\001\002\000\050\005\130\022\132\030\140\031" +
    "\122\032\121\033\161\034\144\041\151\042\uff89\045\133" +
    "\046\117\047\142\050\134\051\152\052\147\053\154\054" +
    "\157\100\137\101\171\001\002\000\054\004\uff92\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\012\uff92\013\uff92\014\uff92\015" +
    "\uff92\016\uff92\017\uff92\020\uff92\021\uff92\023\uff92\035\uff92" +
    "\036\uff92\041\167\042\uff92\062\uff92\063\uff92\077\uff92\001" +
    "\002\000\004\042\245\001\002\000\044\004\205\005\174" +
    "\006\200\007\177\010\201\012\210\013\203\014\202\015" +
    "\212\016\204\017\176\020\175\021\213\023\207\035\206" +
    "\042\uff8b\062\uff8b\001\002\000\046\005\130\022\132\030" +
    "\140\031\122\032\121\033\161\034\144\041\151\045\133" +
    "\046\117\047\142\050\134\051\152\052\147\053\154\054" +
    "\157\100\137\101\171\001\002\000\046\005\130\022\132" +
    "\030\140\031\122\032\121\033\161\034\144\041\151\045" +
    "\133\046\117\047\142\050\134\051\152\052\147\053\154" +
    "\054\157\100\137\101\171\001\002\000\046\005\130\022" +
    "\132\030\140\031\122\032\121\033\161\034\144\041\151" +
    "\045\133\046\117\047\142\050\134\051\152\052\147\053" +
    "\154\054\157\100\137\101\171\001\002\000\046\005\130" +
    "\022\132\030\140\031\122\032\121\033\161\034\144\041" +
    "\151\045\133\046\117\047\142\050\134\051\152\052\147" +
    "\053\154\054\157\100\137\101\171\001\002\000\046\005" +
    "\130\022\132\030\140\031\122\032\121\033\161\034\144" +
    "\041\151\045\133\046\117\047\142\050\134\051\152\052" +
    "\147\053\154\054\157\100\137\101\171\001\002\000\046" +
    "\005\130\022\132\030\140\031\122\032\121\033\161\034" +
    "\144\041\151\045\133\046\117\047\142\050\134\051\152" +
    "\052\147\053\154\054\157\100\137\101\171\001\002\000" +
    "\046\005\130\022\132\030\140\031\122\032\121\033\161" +
    "\034\144\041\151\045\133\046\117\047\142\050\134\051" +
    "\152\052\147\053\154\054\157\100\137\101\171\001\002" +
    "\000\046\005\130\022\132\030\140\031\122\032\121\033" +
    "\161\034\144\041\151\045\133\046\117\047\142\050\134" +
    "\051\152\052\147\053\154\054\157\100\137\101\171\001" +
    "\002\000\046\005\130\022\132\030\140\031\122\032\121" +
    "\033\161\034\144\041\151\045\133\046\117\047\142\050" +
    "\134\051\152\052\147\053\154\054\157\100\137\101\171" +
    "\001\002\000\046\005\130\022\132\030\140\031\122\032" +
    "\121\033\161\034\144\041\151\045\133\046\117\047\142" +
    "\050\134\051\152\052\147\053\154\054\157\100\137\101" +
    "\171\001\002\000\046\005\130\022\132\030\140\031\122" +
    "\032\121\033\161\034\144\041\151\045\133\046\117\047" +
    "\142\050\134\051\152\052\147\053\154\054\157\100\137" +
    "\101\171\001\002\000\004\101\224\001\002\000\046\005" +
    "\130\022\132\030\140\031\122\032\121\033\161\034\144" +
    "\041\151\045\133\046\117\047\142\050\134\051\152\052" +
    "\147\053\154\054\157\100\137\101\171\001\002\000\006" +
    "\042\uff86\062\216\001\002\000\046\005\130\022\132\030" +
    "\140\031\122\032\121\033\161\034\144\041\151\045\133" +
    "\046\117\047\142\050\134\051\152\052\147\053\154\054" +
    "\157\100\137\101\171\001\002\000\046\005\130\022\132" +
    "\030\140\031\122\032\121\033\161\034\144\041\151\045" +
    "\133\046\117\047\142\050\134\051\152\052\147\053\154" +
    "\054\157\100\137\101\171\001\002\000\050\004\205\005" +
    "\174\006\200\007\177\010\201\012\210\013\203\014\202" +
    "\015\212\016\204\017\176\020\175\021\uff9c\023\207\035" +
    "\206\036\uff9c\042\uff9c\062\uff9c\063\uff9c\001\002\000\050" +
    "\004\205\005\174\006\200\007\177\010\201\012\uffa0\013" +
    "\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\023\207\035\206\036\uffa0\042\uffa0\062\uffa0\063\uffa0\001" +
    "\002\000\046\005\130\022\132\030\140\031\122\032\121" +
    "\033\161\034\144\041\151\045\133\046\117\047\142\050" +
    "\134\051\152\052\147\053\154\054\157\100\137\101\171" +
    "\001\002\000\004\042\uff8a\001\002\000\044\004\205\005" +
    "\174\006\200\007\177\010\201\012\210\013\203\014\202" +
    "\015\212\016\204\017\176\020\175\021\213\023\207\035" +
    "\206\042\uff88\062\uff88\001\002\000\006\042\uff86\062\216" +
    "\001\002\000\004\042\uff87\001\002\000\050\004\205\005" +
    "\174\006\200\007\177\010\201\012\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\023\207\035" +
    "\206\036\uffa3\042\uffa3\062\uffa3\063\uffa3\001\002\000\054" +
    "\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\012\uff91\013" +
    "\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91" +
    "\023\uff91\035\uff91\036\uff91\041\225\042\uff91\062\uff91\063" +
    "\uff91\077\uff91\001\002\000\050\005\uff8d\022\uff8d\030\uff8d" +
    "\031\uff8d\032\uff8d\033\uff8d\034\uff8d\041\uff8d\042\uff8d\045" +
    "\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d" +
    "\054\uff8d\100\uff8d\101\uff8d\001\002\000\050\005\130\022" +
    "\132\030\140\031\122\032\121\033\161\034\144\041\151" +
    "\042\uff89\045\133\046\117\047\142\050\134\051\152\052" +
    "\147\053\154\054\157\100\137\101\171\001\002\000\004" +
    "\042\230\001\002\000\050\004\uff8c\005\uff8c\006\uff8c\007" +
    "\uff8c\010\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c" +
    "\017\uff8c\020\uff8c\021\uff8c\023\uff8c\035\uff8c\036\uff8c\042" +
    "\uff8c\062\uff8c\063\uff8c\001\002\000\042\004\205\005\174" +
    "\006\200\007\177\010\201\012\210\013\203\014\202\015" +
    "\212\016\204\017\176\020\175\021\213\023\207\035\206" +
    "\036\232\001\002\000\052\004\uff90\005\uff90\006\uff90\007" +
    "\uff90\010\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90" +
    "\017\uff90\020\uff90\021\uff90\023\uff90\035\uff90\036\uff90\042" +
    "\uff90\062\uff90\063\uff90\077\uff90\001\002\000\050\004\uffa9" +
    "\005\uffa9\006\200\007\177\010\201\012\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\023\207" +
    "\035\206\036\uffa9\042\uffa9\062\uffa9\063\uffa9\001\002\000" +
    "\050\004\205\005\174\006\200\007\177\010\201\012\210" +
    "\013\203\014\202\015\212\016\uff9f\017\uff9f\020\uff9f\021" +
    "\uff9f\023\207\035\206\036\uff9f\042\uff9f\062\uff9f\063\uff9f" +
    "\001\002\000\050\004\205\005\174\006\200\007\177\010" +
    "\201\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\023\207\035\206\036\uffa2\042\uffa2\062" +
    "\uffa2\063\uffa2\001\002\000\050\004\205\005\174\006\200" +
    "\007\177\010\201\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\020\uffa1\021\uffa1\023\207\035\206\036\uffa1" +
    "\042\uffa1\062\uffa1\063\uffa1\001\002\000\050\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\012\uffa5\013\uffa5\014\uffa5" +
    "\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\023\207\035" +
    "\206\036\uffa5\042\uffa5\062\uffa5\063\uffa5\001\002\000\050" +
    "\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\012\uffa7\013" +
    "\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7" +
    "\023\207\035\206\036\uffa7\042\uffa7\062\uffa7\063\uffa7\001" +
    "\002\000\050\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\023\207\035\206\036\uffa6\042\uffa6\062\uffa6" +
    "\063\uffa6\001\002\000\050\004\205\005\174\006\200\007" +
    "\177\010\201\012\210\013\203\014\202\015\212\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\023\207\035\206\036\uff9e\042" +
    "\uff9e\062\uff9e\063\uff9e\001\002\000\050\004\205\005\174" +
    "\006\200\007\177\010\201\012\210\013\203\014\202\015" +
    "\212\016\204\017\176\020\uff9d\021\uff9d\023\207\035\206" +
    "\036\uff9d\042\uff9d\062\uff9d\063\uff9d\001\002\000\050\004" +
    "\uffa8\005\uffa8\006\200\007\177\010\201\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\023" +
    "\207\035\206\036\uffa8\042\uffa8\062\uffa8\063\uffa8\001\002" +
    "\000\050\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\012" +
    "\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e" +
    "\021\uff8e\023\uff8e\035\uff8e\036\uff8e\042\uff8e\062\uff8e\063" +
    "\uff8e\001\002\000\046\005\130\022\132\030\140\031\122" +
    "\032\121\033\161\034\144\041\151\045\133\046\117\047" +
    "\142\050\134\051\152\052\147\053\154\054\157\100\137" +
    "\101\171\001\002\000\044\004\205\005\174\006\200\007" +
    "\177\010\201\012\210\013\203\014\202\015\212\016\204" +
    "\017\176\020\175\021\213\023\207\035\206\042\uffb4\062" +
    "\uffb4\001\002\000\006\042\uffb0\062\251\001\002\000\046" +
    "\005\130\022\132\030\140\031\122\032\121\033\161\034" +
    "\144\041\151\045\133\046\117\047\142\050\134\051\152" +
    "\052\147\053\154\054\157\100\137\101\171\001\002\000" +
    "\004\042\253\001\002\000\004\063\254\001\002\000\074" +
    "\005\uffb3\022\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\041\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\063\uffb3\067" +
    "\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3" +
    "\076\uffb3\100\uffb3\101\uffb3\001\002\000\044\004\205\005" +
    "\174\006\200\007\177\010\201\012\210\013\203\014\202" +
    "\015\212\016\204\017\176\020\175\021\213\023\207\035" +
    "\206\042\uffb2\062\uffb2\001\002\000\006\042\uffb0\062\251" +
    "\001\002\000\004\042\uffb1\001\002\000\004\044\uffce\001" +
    "\002\000\046\005\130\022\132\030\140\031\122\032\121" +
    "\033\161\034\144\041\151\045\133\046\117\047\142\050" +
    "\134\051\152\052\147\053\154\054\157\100\137\101\171" +
    "\001\002\000\042\004\205\005\174\006\200\007\177\010" +
    "\201\012\210\013\203\014\202\015\212\016\204\017\176" +
    "\020\175\021\213\023\207\035\206\042\263\001\002\000" +
    "\050\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\012\uff93" +
    "\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021" +
    "\uff93\023\uff93\035\uff93\036\uff93\042\uff93\062\uff93\063\uff93" +
    "\001\002\000\004\044\uffd0\001\002\000\046\005\130\022" +
    "\132\030\140\031\122\032\121\033\161\034\144\041\151" +
    "\045\133\046\117\047\142\050\134\051\152\052\147\053" +
    "\154\054\157\100\137\101\171\001\002\000\050\004\205" +
    "\005\174\006\200\007\177\010\201\012\210\013\203\014" +
    "\202\015\212\016\204\017\176\020\175\021\213\023\207" +
    "\035\206\036\uffaf\042\uffaf\062\uffaf\063\uffaf\001\002\000" +
    "\046\005\130\022\132\030\140\031\122\032\121\033\161" +
    "\034\144\041\151\045\133\046\117\047\142\050\134\051" +
    "\152\052\147\053\154\054\157\100\137\101\171\001\002" +
    "\000\042\004\205\005\174\006\200\007\177\010\201\012" +
    "\210\013\203\014\202\015\212\016\204\017\176\020\175" +
    "\021\213\023\207\035\206\042\271\001\002\000\050\004" +
    "\uff94\005\uff94\006\uff94\007\uff94\010\uff94\012\uff94\013\uff94" +
    "\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\023" +
    "\uff94\035\uff94\036\uff94\042\uff94\062\uff94\063\uff94\001\002" +
    "\000\004\041\273\001\002\000\046\005\130\022\132\030" +
    "\140\031\122\032\121\033\161\034\144\041\151\045\133" +
    "\046\117\047\142\050\134\051\152\052\147\053\154\054" +
    "\157\100\137\101\171\001\002\000\042\004\205\005\174" +
    "\006\200\007\177\010\201\012\210\013\203\014\202\015" +
    "\212\016\204\017\176\020\175\021\213\023\207\035\206" +
    "\042\uffba\001\002\000\004\042\276\001\002\000\070\005" +
    "\130\022\132\030\140\031\122\032\121\033\161\034\144" +
    "\041\151\043\112\045\133\046\117\047\142\050\134\051" +
    "\152\052\147\053\154\054\157\063\uffc2\067\136\071\153" +
    "\072\127\073\141\074\145\075\126\076\165\100\137\101" +
    "\171\001\002\000\074\005\uffb9\022\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\041\uffb9\043\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\063\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073" +
    "\uffb9\074\uffb9\075\uffb9\076\uffb9\100\uffb9\101\uffb9\001\002" +
    "\000\046\005\130\022\132\030\140\031\122\032\121\033" +
    "\161\034\144\041\151\045\133\046\117\047\142\050\134" +
    "\051\152\052\147\053\154\054\157\100\137\101\171\001" +
    "\002\000\042\004\205\005\174\006\200\007\177\010\201" +
    "\012\210\013\203\014\202\015\212\016\204\017\176\020" +
    "\175\021\213\023\207\035\206\042\302\001\002\000\050" +
    "\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\012\uff96\013" +
    "\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96" +
    "\023\uff96\035\uff96\036\uff96\042\uff96\062\uff96\063\uff96\001" +
    "\002\000\042\004\205\005\174\006\200\007\177\010\201" +
    "\012\210\013\203\014\202\015\212\016\204\017\176\020" +
    "\175\021\213\023\207\035\206\042\304\001\002\000\050" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\012\uffaa\013" +
    "\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa" +
    "\023\uffaa\035\uffaa\036\uffaa\042\uffaa\062\uffaa\063\uffaa\001" +
    "\002\000\046\005\130\022\132\030\140\031\122\032\121" +
    "\033\161\034\144\041\151\045\133\046\117\047\142\050" +
    "\134\051\152\052\147\053\154\054\157\100\137\101\171" +
    "\001\002\000\042\004\205\005\174\006\200\007\177\010" +
    "\201\012\210\013\203\014\202\015\212\016\204\017\176" +
    "\020\175\021\213\023\207\035\206\042\307\001\002\000" +
    "\050\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95\012\uff95" +
    "\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021" +
    "\uff95\023\uff95\035\uff95\036\uff95\042\uff95\062\uff95\063\uff95" +
    "\001\002\000\074\005\uffb6\022\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\033\uffb6\034\uffb6\041\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\063\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\074\uffb6\075\uffb6\076\uffb6\100\uffb6\101\uffb6\001\002\000" +
    "\050\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\012\uff98" +
    "\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021" +
    "\uff98\023\uff98\035\uff98\036\uff98\042\uff98\062\uff98\063\uff98" +
    "\001\002\000\004\063\313\001\002\000\074\005\uffb7\022" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\041\uffb7" +
    "\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\063\uffb7\067\uffb7\070\uffb7" +
    "\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\100" +
    "\uffb7\101\uffb7\001\002\000\046\005\130\022\132\030\140" +
    "\031\122\032\121\033\161\034\144\041\151\045\133\046" +
    "\117\047\142\050\134\051\152\052\147\053\154\054\157" +
    "\100\137\101\171\001\002\000\042\004\205\005\174\006" +
    "\200\007\177\010\201\012\210\013\203\014\202\015\212" +
    "\016\204\017\176\020\175\021\213\023\207\035\206\042" +
    "\uffc1\001\002\000\004\042\317\001\002\000\070\005\130" +
    "\022\132\030\140\031\122\032\121\033\161\034\144\041" +
    "\151\043\112\045\133\046\117\047\142\050\134\051\152" +
    "\052\147\053\154\054\157\063\uffc2\067\136\071\153\072" +
    "\127\073\141\074\145\075\126\076\165\100\137\101\171" +
    "\001\002\000\074\005\uffc0\022\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\041\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054" +
    "\uffc0\063\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0" +
    "\074\uffc0\075\uffc0\076\uffc0\100\uffc0\101\uffc0\001\002\000" +
    "\074\005\uffbc\022\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\041\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\063\uffbc" +
    "\067\uffbc\070\322\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075" +
    "\uffbc\076\uffbc\100\uffbc\101\uffbc\001\002\000\070\005\uffbe" +
    "\022\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\041" +
    "\uffbe\043\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\063\uffbe\067\uffbe\071\uffbe\072" +
    "\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\100\uffbe\101\uffbe" +
    "\001\002\000\074\005\uffbf\022\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\041\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\063\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf" +
    "\074\uffbf\075\uffbf\076\uffbf\100\uffbf\101\uffbf\001\002\000" +
    "\070\005\130\022\132\030\140\031\122\032\121\033\161" +
    "\034\144\041\151\043\112\045\133\046\117\047\142\050" +
    "\134\051\152\052\147\053\154\054\157\063\uffc2\067\136" +
    "\071\153\072\127\073\141\074\145\075\126\076\165\100" +
    "\137\101\171\001\002\000\074\005\uffbd\022\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\041\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\063\uffbd\067\uffbd\070\uffbd\071\uffbd\072" +
    "\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\100\uffbd\101\uffbd" +
    "\001\002\000\046\005\130\022\132\030\140\031\122\032" +
    "\121\033\161\034\144\041\151\045\133\046\117\047\142" +
    "\050\134\051\152\052\147\053\154\054\157\100\137\101" +
    "\171\001\002\000\042\004\205\005\174\006\200\007\177" +
    "\010\201\012\210\013\203\014\202\015\212\016\204\017" +
    "\176\020\175\021\213\023\207\035\206\062\330\001\002" +
    "\000\014\024\007\025\017\026\013\027\016\101\021\001" +
    "\002\000\006\037\075\042\332\001\002\000\050\004\uff97" +
    "\005\uff97\006\uff97\007\uff97\010\uff97\012\uff97\013\uff97\014" +
    "\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\023\uff97" +
    "\035\uff97\036\uff97\042\uff97\062\uff97\063\uff97\001\002\000" +
    "\004\042\334\001\002\000\050\004\uff9a\005\uff9a\006\uff9a" +
    "\007\uff9a\010\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\023\uff9a\035\uff9a\036\uff9a" +
    "\042\uff9a\062\uff9a\063\uff9a\001\002\000\050\004\uff9b\005" +
    "\uff9b\006\uff9b\007\uff9b\010\uff9b\012\uff9b\013\uff9b\014\uff9b" +
    "\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\023\207\035" +
    "\206\036\uff9b\042\uff9b\062\uff9b\063\uff9b\001\002\000\004" +
    "\044\337\001\002\000\122\002\uffd1\005\uffd1\022\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\041\uffd1\043\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\063\uffd1\064\uffd1\065\uffd1\066" +
    "\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1" +
    "\075\uffd1\076\uffd1\100\uffd1\101\uffd1\001\002\000\050\004" +
    "\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\023" +
    "\207\035\206\036\uffa4\042\uffa4\062\uffa4\063\uffa4\001\002" +
    "\000\050\005\130\022\132\030\140\031\122\032\121\033" +
    "\161\034\144\041\151\045\133\046\117\047\142\050\134" +
    "\051\152\052\147\053\154\054\157\063\uffc2\100\137\101" +
    "\171\001\002\000\004\063\343\001\002\000\046\005\130" +
    "\022\132\030\140\031\122\032\121\033\161\034\144\041" +
    "\151\045\133\046\117\047\142\050\134\051\152\052\147" +
    "\053\154\054\157\100\137\101\171\001\002\000\042\004" +
    "\205\005\174\006\200\007\177\010\201\012\210\013\203" +
    "\014\202\015\212\016\204\017\176\020\175\021\213\023" +
    "\207\035\206\063\345\001\002\000\050\005\130\022\132" +
    "\030\140\031\122\032\121\033\161\034\144\041\151\042" +
    "\uffc2\045\133\046\117\047\142\050\134\051\152\052\147" +
    "\053\154\054\157\100\137\101\171\001\002\000\004\042" +
    "\347\001\002\000\070\005\130\022\132\030\140\031\122" +
    "\032\121\033\161\034\144\041\151\043\112\045\133\046" +
    "\117\047\142\050\134\051\152\052\147\053\154\054\157" +
    "\063\uffc2\067\136\071\153\072\127\073\141\074\145\075" +
    "\126\076\165\100\137\101\171\001\002\000\074\005\uffb8" +
    "\022\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\041" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\063\uffb8\067\uffb8\070" +
    "\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8" +
    "\100\uffb8\101\uffb8\001\002\000\074\005\uffb5\022\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\041\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\063\uffb5\067\uffb5\070\uffb5\071\uffb5" +
    "\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\100\uffb5\101" +
    "\uffb5\001\002\000\004\042\353\001\002\000\050\004\uff99" +
    "\005\uff99\006\uff99\007\uff99\010\uff99\012\uff99\013\uff99\014" +
    "\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\023\uff99" +
    "\035\uff99\036\uff99\042\uff99\062\uff99\063\uff99\001\002\000" +
    "\074\005\uffcc\022\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\041\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\063\uffcc" +
    "\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075" +
    "\uffcc\076\uffcc\100\uffcc\101\uffcc\001\002\000\004\002\001" +
    "\001\002\000\120\002\ufff9\005\ufff9\022\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\041\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047" +
    "\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9" +
    "\056\ufff9\057\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067" +
    "\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9" +
    "\100\ufff9\101\ufff9\001\002\000\024\002\ufffe\024\007\025" +
    "\017\026\013\027\016\055\014\056\023\057\020\101\021" +
    "\001\002\000\004\002\000\001\002\000\004\002\uffff\001" +
    "\002\000\006\041\363\063\ufff8\001\002\000\016\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\042\ufff1\101\ufff1\001\002\000" +
    "\016\024\007\025\017\026\013\027\016\042\uffea\101\021" +
    "\001\002\000\004\042\ufff0\001\002\000\004\042\367\001" +
    "\002\000\004\043\112\001\002\000\034\002\uffef\024\uffef" +
    "\025\uffef\026\uffef\027\uffef\044\uffef\055\uffef\056\uffef\057" +
    "\uffef\064\uffef\065\uffef\066\uffef\101\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\022\002\011\004\007\005\005\006\010\007" +
    "\021\012\014\021\004\045\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\357\004\356\005\005\006\010\007\021\012\014" +
    "\021\004\045\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\025\001\001\000\002\001\001\000\004\014\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\034\001\001\000\002\001\001\000\010\016\037\017\040" +
    "\020\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\046\017\040\020\041\001\001\000\012\005\044" +
    "\006\010\007\045\045\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\054\023\056\045\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\057\023\056\045\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\063\010\064\045\062\001\001\000" +
    "\002\001\001\000\004\011\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\071\045\062\001\001\000\004\011\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\063\010\100" +
    "\045\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\105\001\001" +
    "\000\010\006\063\010\106\045\062\001\001\000\004\055" +
    "\107\001\001\000\002\001\001\000\004\024\112\001\001" +
    "\000\004\056\113\001\001\000\002\001\001\000\050\005" +
    "\155\006\010\024\142\025\130\027\117\030\157\031\115" +
    "\032\145\034\134\035\123\036\114\037\163\040\162\041" +
    "\124\045\062\046\154\047\147\050\122\051\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\046\154\047\337\050\122" +
    "\051\161\001\001\000\004\057\335\001\001\000\012\046" +
    "\154\047\334\050\122\051\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\031\311\046\154" +
    "\047\147\050\122\051\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\046" +
    "\154\047\302\050\122\051\161\001\001\000\002\001\001" +
    "\000\004\063\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\005\155\006\010\024\142\025\263\027\117" +
    "\030\157\031\115\032\145\034\134\035\123\036\114\037" +
    "\163\040\162\041\124\045\062\046\154\047\147\050\122" +
    "\051\161\001\001\000\002\001\001\000\040\024\142\027" +
    "\257\030\157\031\115\032\145\034\134\035\123\036\114" +
    "\037\163\040\162\041\124\046\154\047\147\050\122\051" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\167\001\001\000\014\044\171\046\154" +
    "\047\172\050\122\051\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\210\001\001\000\012\046\154" +
    "\047\243\050\122\051\161\001\001\000\012\046\154\047" +
    "\242\050\122\051\161\001\001\000\012\046\154\047\241" +
    "\050\122\051\161\001\001\000\012\046\154\047\240\050" +
    "\122\051\161\001\001\000\012\046\154\047\237\050\122" +
    "\051\161\001\001\000\012\046\154\047\236\050\122\051" +
    "\161\001\001\000\012\046\154\047\235\050\122\051\161" +
    "\001\001\000\012\046\154\047\234\050\122\051\161\001" +
    "\001\000\012\046\154\047\233\050\122\051\161\001\001" +
    "\000\012\046\154\047\232\050\122\051\161\001\001\000" +
    "\012\046\154\047\230\050\122\051\161\001\001\000\002" +
    "\001\001\000\012\046\154\047\222\050\122\051\161\001" +
    "\001\000\004\043\216\001\001\000\012\046\154\047\214" +
    "\050\122\051\161\001\001\000\012\046\154\047\213\050" +
    "\122\051\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\046\154\047\217\050\122\051\161\001\001\000" +
    "\002\001\001\000\004\072\220\001\001\000\004\043\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\070\225\001\001\000\014\044\226\046\154" +
    "\047\172\050\122\051\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\046\154\047\246\050\122\051\161" +
    "\001\001\000\004\065\247\001\001\000\004\042\251\001" +
    "\001\000\012\046\154\047\254\050\122\051\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\255\001\001\000\004\042\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\046\154\047\261\050" +
    "\122\051\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\046\154\047\265\050\122\051" +
    "\161\001\001\000\002\001\001\000\012\046\154\047\267" +
    "\050\122\051\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\046\154\047\273\050\122" +
    "\051\161\001\001\000\004\064\274\001\001\000\002\001" +
    "\001\000\036\024\142\030\276\031\115\032\145\034\134" +
    "\035\123\036\114\037\163\040\162\041\124\046\154\047" +
    "\147\050\122\051\161\001\001\000\002\001\001\000\012" +
    "\046\154\047\300\050\122\051\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\046\154\047\305\050\122\051\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\046" +
    "\154\047\314\050\122\051\161\001\001\000\004\060\315" +
    "\001\001\000\002\001\001\000\036\024\142\030\317\031" +
    "\115\032\145\034\134\035\123\036\114\037\163\040\162" +
    "\041\124\046\154\047\147\050\122\051\161\001\001\000" +
    "\004\061\320\001\001\000\004\033\322\001\001\000\004" +
    "\062\323\001\001\000\002\001\001\000\036\024\142\030" +
    "\324\031\115\032\145\034\134\035\123\036\114\037\163" +
    "\040\162\041\124\046\154\047\147\050\122\051\161\001" +
    "\001\000\002\001\001\000\012\046\154\047\326\050\122" +
    "\051\161\001\001\000\002\001\001\000\004\045\330\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\031\341\046\154" +
    "\047\147\050\122\051\161\001\001\000\002\001\001\000" +
    "\012\046\154\047\343\050\122\051\161\001\001\000\002" +
    "\001\001\000\014\031\345\046\154\047\147\050\122\051" +
    "\161\001\001\000\002\001\001\000\036\024\142\030\347" +
    "\031\115\032\145\034\134\035\123\036\114\037\163\040" +
    "\162\041\124\046\154\047\147\050\122\051\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\360\004\356\005\005\006\010\007" +
    "\021\012\014\021\004\045\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\363\001" +
    "\001\000\010\006\063\010\364\045\062\001\001\000\004" +
    "\053\365\001\001\000\002\001\001\000\004\024\367\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }


	private MyScanner scanner;
	public parser (MyScanner scanner){
		this.scanner = scanner;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Decl DeclStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclStar ::= Decl DeclStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VariableDecl ::= Variable SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Variable ::= Type IDENTIFIER 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if ( ParserPhase.getInstance().getPhase() == 0 ) {
//								if ( ParserHelper.getInstance().insideFunctionFormals )
								if ( type instanceof Type ) {
									Type t = (Type) type;
									String name = IDGenerator.getInstance().getNextID();
									Descriptor temp = new Descriptor( name, t );
									SymbolTable.getInstance().getSymbolTable().addEntry( id, temp );
									if ( ParserHelper.getInstance().insideFunctionFormals ) {
										int prevCount = (int) SemanticStack.getInstance().popDescriptor();
										SemanticStack.getInstance().pushDescriptor( temp );
										SemanticStack.getInstance().pushDescriptor( id );
										SemanticStack.getInstance().pushDescriptor( prevCount + 1 );
									}
									CodeGen.getInstance().addToData( name, Type.getMipsType( t ), Integer.toString( 0 ) );
								}
								else if ( type instanceof ArrayType ) {
									ArrayType t = (ArrayType) type;
									String name = IDGenerator.getInstance().getNextID();
									Descriptor temp = new ArrayDescriptor( name, t );
									SymbolTable.getInstance().getSymbolTable().addEntry( id, temp );
									if ( ParserHelper.getInstance().insideFunctionFormals ) {
                                        int prevCount = (int) SemanticStack.getInstance().popDescriptor();
                                        SemanticStack.getInstance().pushDescriptor( temp );
                                        SemanticStack.getInstance().pushDescriptor( id );
                                        SemanticStack.getInstance().pushDescriptor( prevCount + 1 );
                                    }
									CodeGen.getInstance().addToData( name, Type.getMipsType( t ), Integer.toString( 0 ) );
								}
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = Type.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = Type.DOUBLE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = Type.BOOL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = Type.STRING; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= IDENTIFIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Type.OBJECT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= Type OPENCLOSEBRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( t == Type.INT || t == Type.DOUBLE || t == Type.BOOL
									|| t == Type.STRING || t == Type.OBJECT )
								RESULT = new ArrayType( (Type) t, 1 );
							else if ( t instanceof ArrayType ) {
									ArrayType temp = (ArrayType) t;
									RESULT = new ArrayType( temp.getSubType(), temp.getDimensionCount() + 1 );
								}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 0 ) {
								SymbolTable.getInstance().getSymbolTable().addEntry(
										name,
										new FunctionDescriptor(
												name,
												"_" + IDGenerator.getInstance().getNextID(),
												(Type) t
										)
								);
								SymbolTable.getInstance().makeNextAndSwitch( name );
							}
							else if ( phase == 1 ) {
								FunctionDescriptor temp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( name );
								CodeGen.getInstance().addToText(
										temp.getFunctionName() + ":\n",
										true
								);
								SymbolTable.getInstance().switchToNext();
							}
							ParserHelper.getInstance().insideFunctionFormals = true;
							SemanticStack.getInstance().pushDescriptor( 0 );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 0 ) {
								int formalsCount = (int) SemanticStack.getInstance().popDescriptor();
								for ( int i = 0; i < formalsCount; i++ ) {
									FunctionDescriptor funcDscp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( name );
									String argumentName = (String) SemanticStack.getInstance().popDescriptor();
									Descriptor argumentDescriptor = (Descriptor) SemanticStack.getInstance().popDescriptor();
									funcDscp.addArgument( argumentName, argumentDescriptor, true );
								}
//								SymbolTable.getInstance().makeNextAndSwitch();
							}
							else if ( phase == 1 ) {
								FunctionDescriptor funcDscp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( name );
								ParserHelper.getInstance().currentFunctionDscp = funcDscp;
//								SymbolTable.getInstance().switchToNext();
							}
							ParserHelper.getInstance().insideFunctionFormals = false;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FunctionDecl ::= Type IDENTIFIER OPENPARENTHESIS NT$0 Formals NT$1 CLOSEPARENTHESIS StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
//							SymbolTable.getInstance().goBack();
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
//								SemanticStack.getInstance().popDescriptor(); // was for return stmt
								if ( SymbolTable.getInstance().getSymbolTable().getScopeName().equals( "main" )
										&& SymbolTable.getInstance().getSymbolTable().getEntryCount() == 0
										&& ( (Type) t ) == Type.INT ) {
	                                CodeGen.getInstance().addToText( "# Exit!" );
	                                CodeGen.getInstance().addToText( "li $v0, 10" );
	                                CodeGen.getInstance().addToText( "syscall" );
	                                CodeGen.getInstance().addEmptyLine();
	                                CodeGen.getInstance().addEmptyLine();
                                }
                                else {
                                    CodeGen.getInstance().addToText( "# returning from function " + name );
                                    CodeGen.getInstance().addToText( "jr $ra" );
                                    CodeGen.getInstance().addEmptyLine();
                                }
							}
							SymbolTable.getInstance().goBack();
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$2 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 0 ) {
                                SymbolTable.getInstance().getSymbolTable().addEntry(
                                        name,
                                        new FunctionDescriptor(
                                                name,
                                                "_" + IDGenerator.getInstance().getNextID(),
                                                Type.VOID
                                        )
                                );
                                SymbolTable.getInstance().makeNextAndSwitch( name );
                            }
                            else if ( phase == 1 ) {
                                FunctionDescriptor temp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( name );
                                CodeGen.getInstance().addToText(
                                        temp.getFunctionName() + ":\n",
                                        true
                                );
                                SymbolTable.getInstance().switchToNext();
                            }
                            ParserHelper.getInstance().insideFunctionFormals = true;
                            SemanticStack.getInstance().pushDescriptor( 0 );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

							int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 0 ) {
                                int formalsCount = (int) SemanticStack.getInstance().popDescriptor();
                                for ( int i = 0; i < formalsCount; i++ ) {
                                    FunctionDescriptor funcDscp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( name );
                                    String argumentName = (String) SemanticStack.getInstance().popDescriptor();
                                    Descriptor argumentDescriptor = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                    funcDscp.addArgument( argumentName, argumentDescriptor, true );
                                }
//								SymbolTable.getInstance().makeNextAndSwitch();
                            }
                            else if ( phase == 1 ) {
                                FunctionDescriptor funcDscp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( name );
                                ParserHelper.getInstance().currentFunctionDscp = funcDscp;
//								SymbolTable.getInstance().switchToNext();
                            }
                            ParserHelper.getInstance().insideFunctionFormals = false;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FunctionDecl ::= VOID IDENTIFIER OPENPARENTHESIS NT$2 Formals NT$3 CLOSEPARENTHESIS StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
//								SemanticStack.getInstance().popDescriptor(); // was for return stmt
                                CodeGen.getInstance().addToText( "# returning from function " + name );
                                CodeGen.getInstance().addToText( "jr $ra" );
                                CodeGen.getInstance().addEmptyLine();
                            }
                            SymbolTable.getInstance().goBack();
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Formals ::= Variable CommaVariables 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Formals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CommaVariables ::= COMMA Variable CommaVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaVariables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CommaVariables ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaVariables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= CLASS IDENTIFIER ClassDeclExtends ClassDeclImplements OPENCURLYBRACES FieldStar CLOSECURLYBRACES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDeclExtends ::= EXTENDS IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclExtends",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDeclExtends ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclExtends",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDeclImplements ::= IMPLEMENTS IDENTIFIER CommaIdentifiers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclImplements",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassDeclImplements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclImplements",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CommaIdentifiers ::= COMMA IDENTIFIER CommaIdentifiers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaIdentifiers",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CommaIdentifiers ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaIdentifiers",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FieldStar ::= Field FieldStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FieldStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Field ::= AccessMode VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Field ::= AccessMode FunctionDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AccessMode ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AccessMode ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AccessMode ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AccessMode ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InterfaceDecl ::= INTERFACE IDENTIFIER OPENCURLYBRACES PrototypeStar CLOSECURLYBRACES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PrototypeStar ::= Prototype PrototypeStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PrototypeStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Prototype ::= Type IDENTIFIER OPENPARENTHESIS Formals CLOSEPARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Prototype ::= VOID IDENTIFIER OPENPARENTHESIS Formals CLOSEPARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$4 ::= 
            {
              Object RESULT =null;

							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 0 )
								SymbolTable.getInstance().makeNextAndSwitch();
							else if ( phase == 1 )
								SymbolTable.getInstance().switchToNext();
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							SymbolTable.getInstance().goBack();
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StmtBlock ::= OPENCURLYBRACES NT$4 InsideStmtBlock NT$5 CLOSECURLYBRACES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtBlock",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // InsideStmtBlock ::= VariableDecl InsideStmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InsideStmtBlock",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // InsideStmtBlock ::= StmtStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InsideStmtBlock",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StmtStar ::= Stmt StmtStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StmtStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= ExprPrime SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= ContinueStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExprPrime ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprPrime",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExprPrime ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprPrime",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$6 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 0 )
                                SymbolTable.getInstance().makeNextAndSwitch( SymbolTable.getInstance().getSymbolTable().getScopeName() + "_if");
                            else if ( phase == 1 ) {
                                SymbolTable.getInstance().switchToNext();
                                SemanticStack.getInstance().pushDescriptor( e );
                                IfCodeGen.getInstance().cgen();
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            System.out.println( IDGenerator.getInstance().getNextID() );
                            SymbolTable.getInstance().goBack();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IfStmt ::= IF OPENPARENTHESIS Expr NT$6 CLOSEPARENTHESIS Stmt NT$7 ElsePrime 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$8 ::= 
            {
              Object RESULT =null;

                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 0 )
                                SymbolTable.getInstance().makeNextAndSwitch( SymbolTable.getInstance().getSymbolTable().getScopeName() + "_if");
                            else if ( phase == 1 ) {
                                SymbolTable.getInstance().switchToNext();

                                String elseLabel = (String)LabelStack.getInstance().popLabel("if");
                                String endLabel = (String)LabelStack.getInstance().popLabel("if");
                                CodeGen.getInstance().addToText("b " + endLabel);
                                CodeGen.getInstance().addToText(elseLabel + ":\n", true);
                                LabelStack.getInstance().pushLabel("if", endLabel);
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ElsePrime ::= ELSE NT$8 Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                String endLabel = (String)LabelStack.getInstance().popLabel("if");
                                CodeGen.getInstance().addToText(endLabel + ":\n", true);
                            }
                            SymbolTable.getInstance().goBack();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElsePrime",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ElsePrime ::= 
            {
              Object RESULT =null;
		
						    int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                String elseLabel = (String)LabelStack.getInstance().popLabel("if");
                                String endLabel = (String)LabelStack.getInstance().popLabel("if");
                                CodeGen.getInstance().addToText(elseLabel + ":\n", true);
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElsePrime",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$9 ::= 
            {
              Object RESULT =null;

                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 0 )
                                SymbolTable.getInstance().makeNextAndSwitch( SymbolTable.getInstance().getSymbolTable().getScopeName() + "_if");
                            else if ( phase == 1 ) {
                                SymbolTable.getInstance().switchToNext();
                                String whileLabel = IDGenerator.getInstance().getNextID();
                                LabelStack.getInstance().pushLabel("while", whileLabel);
                                CodeGen.getInstance().addToText(whileLabel + ":\n", true);
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor(e);
                                WhileCodeGen.getInstance().cgen();
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // WhileStmt ::= WHILE NT$9 OPENPARENTHESIS Expr NT$10 CLOSEPARENTHESIS Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                String endWhileLabel = (String)LabelStack.getInstance().popLabel("while");
                                String whileLabel = (String)LabelStack.getInstance().popLabel("while");
                                CodeGen.getInstance().addToText("b " + whileLabel);
                                CodeGen.getInstance().addToText(endWhileLabel + ":\n", true);
                            }
                            SymbolTable.getInstance().goBack();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ForStmt ::= FOR OPENPARENTHESIS ExprPrime SEMICOLON Expr SEMICOLON ExprPrime CLOSEPARENTHESIS Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ReturnStmt ::= RETURN ExprPrime SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
//								System.out.println( SemanticStack.getInstance().topDescriptor() );
//								FunctionDescriptor funcDscp = (FunctionDescriptor) SemanticStack.getInstance().topDescriptor();
								FunctionDescriptor funcDscp = ParserHelper.getInstance().currentFunctionDscp;
								if ( funcDscp == null || funcDscp.getType() == Type.VOID )
									throw new InvalidReturnStatement();
								SemanticStack.getInstance().pushDescriptor( e );
                                SemanticStack.getInstance().pushDescriptor( funcDscp );
                                FunctionReturnStatement.getInstance().cgen();
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BreakStmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ContinueStmt ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContinueStmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$11 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								PrintCodeGen.getInstance().cgen();
							}
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PrintStmt ::= PRINT OPENPARENTHESIS Expr NT$11 PrintCommaExpr CLOSEPARENTHESIS SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$12 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								PrintCodeGen.getInstance().cgen();
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PrintCommaExpr ::= COMMA Expr NT$12 PrintCommaExpr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintCommaExpr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PrintCommaExpr ::= 
            {
              Object RESULT =null;
		
							if ( ParserPhase.getInstance().getPhase() == 1 )
								PrintCodeGen.getInstance().printEnter();
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintCommaExpr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= LValue ASSIGN Expr 
            {
              Descriptor RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor lv = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								SemanticStack.getInstance().pushDescriptor( lv );
								AssignmentCodeGen.getInstance().cgen();
//								ParserHelper.getInstance().isLValueArray = false;
							}
							RESULT = new Descriptor( "", Type.DUMMY );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Constant 
            {
              Descriptor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompileTimeDescriptor c = (CompileTimeDescriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SymbolTable.getInstance().getSymbolTable().addEntry( c.getName(), c );
								Type type = c.getType();
								if ( type == Type.INT || type == Type.DOUBLE || type == Type.BOOL )
									CodeGen.getInstance().addToData(
										c.getName(),
										Type.getMipsType( type ),
										c.getValue().toString()
									);
								else if ( type == Type.STRINGLITERAL ) {
									CodeGen.getInstance().addToData(
										c.getName(),
										Type.getMipsType( type ),
										Integer.toString( c.getValue().toString().length() )
									);
									SemanticStack.getInstance().pushDescriptor( c );
									StringLiteralCodeGen.getInstance().cgen();
								}
							}
							RESULT = c;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= LValue 
            {
              Descriptor RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor lv = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= THIS 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Call 
            {
              Descriptor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor c = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= OPENPARENTHESIS Expr CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr PLUS Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e1 );
								SemanticStack.getInstance().pushDescriptor( e2 );
								PlusCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr MINUS Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e1 );
								SemanticStack.getInstance().pushDescriptor( e2 );
								MinusCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr MULTIPLY Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e1 );
								SemanticStack.getInstance().pushDescriptor( e2 );
								MultiplyCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr DIVIDE Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e1 );
								SemanticStack.getInstance().pushDescriptor( e2 );
								SemanticStack.getInstance().pushDescriptor( "quotient" );
								DivideCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr MOD Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e1 );
                                SemanticStack.getInstance().pushDescriptor( e2 );
                                SemanticStack.getInstance().pushDescriptor( "mod" );
                                DivideCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= MINUS Expr 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e );
                                UnaryMinusCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr LESS Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e1 );
                                SemanticStack.getInstance().pushDescriptor( e2 );
                                LessCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr LESSEQUAL Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             int phase = ParserPhase.getInstance().getPhase();
                             if ( phase == 1 ) {
                                 SemanticStack.getInstance().pushDescriptor( e1 );
                                 SemanticStack.getInstance().pushDescriptor( e2 );
                                 LessEqualCodeGen.getInstance().cgen();
                                 Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                 RESULT = temp;
                             }
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr GREATER Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e1 );
                                SemanticStack.getInstance().pushDescriptor( e2 );
                                GreaterCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= Expr GREATEREQUAL Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             int phase = ParserPhase.getInstance().getPhase();
                             if ( phase == 1 ) {
                                 SemanticStack.getInstance().pushDescriptor( e1 );
                                 SemanticStack.getInstance().pushDescriptor( e2 );
                                 GreaterEqualCodeGen.getInstance().cgen();
                                 Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                 RESULT = temp;
                             }
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Expr EQUAL Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              int phase = ParserPhase.getInstance().getPhase();
                              if ( phase == 1 ) {
                                  SemanticStack.getInstance().pushDescriptor( e1 );
                                  SemanticStack.getInstance().pushDescriptor( e2 );
                                  EqualCodeGen.getInstance().cgen();
                                  Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                  RESULT = temp;
                              }
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= Expr NOTEQUAL Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               int phase = ParserPhase.getInstance().getPhase();
                               if ( phase == 1 ) {
                                   SemanticStack.getInstance().pushDescriptor( e1 );
                                   SemanticStack.getInstance().pushDescriptor( e2 );
                                   NotEqualCodeGen.getInstance().cgen();
                                   Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                   RESULT = temp;
                               }
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= Expr AND Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              int phase = ParserPhase.getInstance().getPhase();
                              if ( phase == 1 ) {
                                  SemanticStack.getInstance().pushDescriptor( e1 );
                                  SemanticStack.getInstance().pushDescriptor( e2 );
                                  AndCodeGen.getInstance().cgen();
                                  Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                  RESULT = temp;
                              }
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= Expr OR Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             int phase = ParserPhase.getInstance().getPhase();
                             if ( phase == 1 ) {
                                 SemanticStack.getInstance().pushDescriptor( e1 );
                                 SemanticStack.getInstance().pushDescriptor( e2 );
                                 OrCodeGen.getInstance().cgen();
                                 Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                 RESULT = temp;
                             }
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= NOT Expr 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          int phase = ParserPhase.getInstance().getPhase();
                          if ( phase == 1 ) {
                              SemanticStack.getInstance().pushDescriptor( e );
                              NotCodeGen.getInstance().cgen();
                              Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                              RESULT = temp;
                          }
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr ::= READINTEGER OPENPARENTHESIS CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								IntegerInputCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr ::= READLINE OPENPARENTHESIS CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
	                            StringInputCodeGen.getInstance().cgen();
	                            Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
	                            RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= NEW IDENTIFIER 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expr ::= NEWARRAY OPENPARENTHESIS Expr COMMA Type CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								ValidArraySizeCheckerCodeGen.getInstance().cgen();
								SemanticStack.getInstance().pushDescriptor( e );
								SemanticStack.getInstance().pushDescriptor( t );
								NewArrayCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expr ::= ITOD OPENPARENTHESIS Expr CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								itodCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expr ::= DTOI OPENPARENTHESIS Expr CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e );
                                dtoiCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expr ::= ITOB OPENPARENTHESIS Expr CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e );
                                itobCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Expr ::= BTOI OPENPARENTHESIS Expr CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e );
                                btoiCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LValue ::= IDENTIFIER 
            {
              Descriptor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = SymbolTable.getInstance().getSymbolTable().getDescriptor( id );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LValue ::= Expr DOT IDENTIFIER 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LValue ::= Expr OPENBRACKET Expr CLOSEBRACKET 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
//								ParserHelper.getInstance().isLValueArray = true;
								SemanticStack.getInstance().pushDescriptor( e2 );
								SemanticStack.getInstance().pushDescriptor( e1 );
								ArrayGetIndexValueCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$13 ::= 
            {
              Descriptor RESULT =null;
		int functionIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int functionIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String functionID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							if ( ParserPhase.getInstance().getPhase() == 1 )
								SemanticStack.getInstance().pushDescriptor( 0 );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Call ::= IDENTIFIER OPENPARENTHESIS NT$13 Actuals CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Descriptor) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int functionIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int functionIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String functionID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                int actualsCount = (int) SemanticStack.getInstance().popDescriptor();
                                FunctionDescriptor funcDscp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( functionID );
                                if ( actualsCount != funcDscp.getArgumentCount() )
                                    throw new FunctionInputMismatch( functionID );
                                SaveLocalVariablesCodeGen.getInstance().cgen();
                                for ( int i = 0; i < actualsCount; i++ ) {
                                    Descriptor actualDescriptor = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                    Descriptor formalDescriptor = funcDscp.getArgumentDescriptor( actualsCount - i - 1 );
                                    if ( actualDescriptor.getType() != formalDescriptor.getType() )
                                        throw new FunctionInputMismatch( functionID );
                                    SemanticStack.getInstance().pushDescriptor( i );
                                    SemanticStack.getInstance().pushDescriptor( actualDescriptor );
                                    SemanticStack.getInstance().pushDescriptor( formalDescriptor );
                                    FunctionArgumentCodeGen.getInstance().cgen();
                                }
                                SemanticStack.getInstance().pushDescriptor( funcDscp );
                                FunctionCallCodeGen.getInstance().cgen();
                                SemanticStack.getInstance().pushDescriptor( funcDscp );
                                FunctionValueRetrieveCodeGen.getInstance().cgen();
                                FunctionCallEndedCodeGen.getInstance().cgen();
                                LoadLocalVariablesCodeGen.getInstance().cgen();
                                Descriptor temp = null;
                                if ( funcDscp.getType() != Type.VOID )
                                    temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$14 ::= 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							if ( ParserPhase.getInstance().getPhase() == 1 )
                                SemanticStack.getInstance().pushDescriptor( 0 );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Call ::= Expr DOT IDENTIFIER OPENPARENTHESIS NT$14 Actuals CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Descriptor) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								int actualsCount = (int) SemanticStack.getInstance().topDescriptor();
								if ( e.getType() == Type.ARRAY && actualsCount == 0 && id.equals( "length" ) ) {
									SemanticStack.getInstance().popDescriptor();
									SemanticStack.getInstance().pushDescriptor( e );
									ArraySizeCodeGen.getInstance().cgen();
									Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
									RESULT = temp;
								}
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$15 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                int prevCount = (int) SemanticStack.getInstance().popDescriptor();
                                SemanticStack.getInstance().pushDescriptor( e );
                                SemanticStack.getInstance().pushDescriptor( prevCount + 1 );
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Actuals ::= Expr NT$15 ActualsCommaExpr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$16 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								int prevCount = (int) SemanticStack.getInstance().popDescriptor();
	                            SemanticStack.getInstance().pushDescriptor( e );
	                            SemanticStack.getInstance().pushDescriptor( prevCount + 1 );
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ActualsCommaExpr ::= COMMA Expr NT$16 ActualsCommaExpr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActualsCommaExpr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ActualsCommaExpr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActualsCommaExpr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Constant ::= DECIMAL 
            {
              CompileTimeDescriptor RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = new CompileTimeDescriptor(
									"_" + IDGenerator.getInstance().getNextID(),
									Type.INT,
									Integer.parseInt( d )
								);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Constant ::= FLOATINGPOINT 
            {
              CompileTimeDescriptor RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = new CompileTimeDescriptor(
									"_" + IDGenerator.getInstance().getNextID(),
									Type.DOUBLE,
									Float.floatToIntBits( Float.parseFloat( f ) )
								);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Constant ::= BOOLEANLITERAL 
            {
              CompileTimeDescriptor RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = new CompileTimeDescriptor(
									"_" + IDGenerator.getInstance().getNextID(),
									Type.BOOL,
									( b.equals( "true" ) ) ? 1 : 0 );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Constant ::= STRINGLITERAL 
            {
              CompileTimeDescriptor RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = new CompileTimeDescriptor(
									"_" + IDGenerator.getInstance().getNextID(),
									Type.STRINGLITERAL,
									s.substring( 1, s.length() - 1 ) + '\0'
								);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Constant ::= NULL 
            {
              CompileTimeDescriptor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompileTimeDescriptor( "_" + IDGenerator.getInstance().getNextID(), Type.NULL, 0 ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
