
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.Parser;

import java_cup.runtime.*;
import compiler.Scanner.MyScanner;
import compiler.CodeGenerator.SymbolTable.*;
import compiler.CodeGenerator.Exceptions.SemanticErrors.*;
import compiler.CodeGenerator.SymbolTable.Utility.*;
import compiler.CodeGenerator.*;
import compiler.CodeGenerator.CodeGen.*;
import compiler.CodeGenerator.SymbolTable.Utility.*;
import compiler.Parser.Utility.ParserHelper;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\004\000" +
    "\002\006\004\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\004\000\002\052\002\000\002\053\002\000\002\007\012" +
    "\000\002\007\010\000\002\010\004\000\002\010\002\000" +
    "\002\011\005\000\002\011\002\000\002\012\011\000\002" +
    "\013\004\000\002\013\002\000\002\014\005\000\002\014" +
    "\002\000\002\015\005\000\002\015\002\000\002\016\004" +
    "\000\002\016\002\000\002\017\004\000\002\017\004\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\002\000\002\021\007\000\002\022\004\000\002\022" +
    "\002\000\002\023\010\000\002\023\010\000\002\054\002" +
    "\000\002\055\002\000\002\024\007\000\002\025\004\000" +
    "\002\025\003\000\002\027\004\000\002\027\002\000\002" +
    "\030\004\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\003\000" +
    "\002\031\002\000\002\056\002\000\002\057\002\000\002" +
    "\032\012\000\002\060\002\000\002\033\005\000\002\033" +
    "\002\000\002\061\002\000\002\062\002\000\002\034\011" +
    "\000\002\063\002\000\002\064\002\000\002\065\002\000" +
    "\002\035\016\000\002\036\005\000\002\066\002\000\002" +
    "\037\005\000\002\067\002\000\002\040\005\000\002\070" +
    "\002\000\002\041\011\000\002\071\002\000\002\042\006" +
    "\000\002\042\002\000\002\047\005\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\005\000\002\047\005\000\002\047\005\000\002\047" +
    "\005\000\002\047\005\000\002\047\005\000\002\047\004" +
    "\000\002\047\005\000\002\047\005\000\002\047\005\000" +
    "\002\047\005\000\002\047\005\000\002\047\005\000\002" +
    "\047\005\000\002\047\005\000\002\047\004\000\002\047" +
    "\005\000\002\047\005\000\002\047\004\000\002\047\010" +
    "\000\002\047\006\000\002\047\006\000\002\047\006\000" +
    "\002\047\006\000\002\046\003\000\002\046\005\000\002" +
    "\046\006\000\002\072\002\000\002\051\007\000\002\073" +
    "\002\000\002\051\011\000\002\074\002\000\002\044\005" +
    "\000\002\044\002\000\002\075\002\000\002\043\006\000" +
    "\002\043\002\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\022\024\007\025\017\026\013\027\016\055" +
    "\014\056\023\057\020\101\021\001\002\000\006\037\075" +
    "\101\365\001\002\000\024\002\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\055\ufffa\056\ufffa\057\ufffa\101\ufffa\001\002" +
    "\000\024\002\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\055" +
    "\ufffd\056\ufffd\057\ufffd\101\ufffd\001\002\000\010\037\ufff7" +
    "\042\ufff7\101\ufff7\001\002\000\024\002\ufffe\024\007\025" +
    "\017\026\013\027\016\055\014\056\023\057\020\101\021" +
    "\001\002\000\004\063\361\001\002\000\004\002\360\001" +
    "\002\000\010\037\ufff5\042\ufff5\101\ufff5\001\002\000\004" +
    "\101\104\001\002\000\024\002\ufffb\024\ufffb\025\ufffb\026" +
    "\ufffb\027\ufffb\055\ufffb\056\ufffb\057\ufffb\101\ufffb\001\002" +
    "\000\010\037\ufff4\042\ufff4\101\ufff4\001\002\000\010\037" +
    "\ufff6\042\ufff6\101\ufff6\001\002\000\004\101\052\001\002" +
    "\000\010\037\ufff3\042\ufff3\101\ufff3\001\002\000\024\002" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\055\ufffc\056\ufffc" +
    "\057\ufffc\101\ufffc\001\002\000\004\101\024\001\002\000" +
    "\010\043\uffe7\060\025\061\uffe7\001\002\000\004\101\051" +
    "\001\002\000\006\043\uffe5\061\030\001\002\000\004\043" +
    "\036\001\002\000\004\101\031\001\002\000\006\043\uffe3" +
    "\062\032\001\002\000\004\101\034\001\002\000\004\043" +
    "\uffe6\001\002\000\006\043\uffe3\062\032\001\002\000\004" +
    "\043\uffe4\001\002\000\026\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\044\uffe1\055\uffdb\064\044\065\037\066\043\101\uffdb" +
    "\001\002\000\016\024\uffdd\025\uffdd\026\uffdd\027\uffdd\055" +
    "\uffdd\101\uffdd\001\002\000\004\044\050\001\002\000\026" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\044\uffe1\055\uffdb\064" +
    "\044\065\037\066\043\101\uffdb\001\002\000\016\024\007" +
    "\025\017\026\013\027\016\055\014\101\021\001\002\000" +
    "\016\024\uffdc\025\uffdc\026\uffdc\027\uffdc\055\uffdc\101\uffdc" +
    "\001\002\000\016\024\uffde\025\uffde\026\uffde\027\uffde\055" +
    "\uffde\101\uffde\001\002\000\026\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\044\uffe0\055\uffe0\064\uffe0\065\uffe0\066\uffe0\101" +
    "\uffe0\001\002\000\026\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\044\uffdf\055\uffdf\064\uffdf\065\uffdf\066\uffdf\101\uffdf\001" +
    "\002\000\004\044\uffe2\001\002\000\024\002\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\055\uffe9\056\uffe9\057\uffe9\101" +
    "\uffe9\001\002\000\006\043\uffe8\061\uffe8\001\002\000\004" +
    "\043\053\001\002\000\020\024\007\025\017\026\013\027" +
    "\016\044\uffd8\055\056\101\021\001\002\000\006\037\075" +
    "\101\077\001\002\000\004\044\076\001\002\000\004\101" +
    "\061\001\002\000\020\024\007\025\017\026\013\027\016" +
    "\044\uffd8\055\056\101\021\001\002\000\004\044\uffd9\001" +
    "\002\000\004\041\062\001\002\000\016\024\007\025\017" +
    "\026\013\027\016\042\uffec\101\021\001\002\000\006\037" +
    "\075\101\074\001\002\000\004\042\072\001\002\000\006" +
    "\042\uffea\062\066\001\002\000\014\024\007\025\017\026" +
    "\013\027\016\101\021\001\002\000\004\042\uffed\001\002" +
    "\000\006\042\uffea\062\066\001\002\000\004\042\uffeb\001" +
    "\002\000\004\063\073\001\002\000\020\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\044\uffd6\055\uffd6\101\uffd6\001\002\000" +
    "\010\042\ufff8\062\ufff8\063\ufff8\001\002\000\010\037\ufff2" +
    "\042\ufff2\101\ufff2\001\002\000\024\002\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\055\uffda\056\uffda\057\uffda\101\uffda" +
    "\001\002\000\004\041\100\001\002\000\016\024\007\025" +
    "\017\026\013\027\016\042\uffec\101\021\001\002\000\004" +
    "\042\102\001\002\000\004\063\103\001\002\000\020\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\044\uffd7\055\uffd7\101\uffd7" +
    "\001\002\000\004\041\105\001\002\000\016\024\007\025" +
    "\017\026\013\027\016\042\uffec\101\021\001\002\000\004" +
    "\042\107\001\002\000\004\043\110\001\002\000\102\005" +
    "\uffd5\022\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\041\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\063\uffd5\067\uffd5\071\uffd5\072\uffd5\073" +
    "\uffd5\074\uffd5\075\uffd5\076\uffd5\100\uffd5\101\uffd5\001\002" +
    "\000\034\002\uffee\024\uffee\025\uffee\026\uffee\027\uffee\044" +
    "\uffee\055\uffee\056\uffee\057\uffee\064\uffee\065\uffee\066\uffee" +
    "\101\uffee\001\002\000\102\005\126\022\130\024\007\025" +
    "\017\026\013\027\016\030\136\031\117\032\121\033\157" +
    "\034\142\041\147\043\110\044\uffcf\045\131\046\116\047" +
    "\140\050\132\051\150\052\145\053\151\054\155\063\uffc4" +
    "\067\134\071\152\072\125\073\137\074\143\075\124\076" +
    "\163\100\135\101\164\001\002\000\074\005\uffc8\022\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\041\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\063\uffc8\067\uffc8\070\uffc8\071" +
    "\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\100\uffc8" +
    "\101\uffc8\001\002\000\004\063\357\001\002\000\004\044" +
    "\uffd1\001\002\000\004\041\355\001\002\000\050\004\uff81" +
    "\005\uff81\006\uff81\007\uff81\010\uff81\012\uff81\013\uff81\014" +
    "\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\023\uff81" +
    "\035\uff81\036\uff81\042\uff81\062\uff81\063\uff81\001\002\000" +
    "\050\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\012\uffab" +
    "\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\023\uffab\035\uffab\036\uffab\042\uffab\062\uffab\063\uffab" +
    "\001\002\000\050\004\uff80\005\uff80\006\uff80\007\uff80\010" +
    "\uff80\012\uff80\013\uff80\014\uff80\015\uff80\016\uff80\017\uff80" +
    "\020\uff80\021\uff80\023\uff80\035\uff80\036\uff80\042\uff80\062" +
    "\uff80\063\uff80\001\002\000\074\005\uffcb\022\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\041\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\063\uffcb\067\uffcb\070\uffcb\071\uffcb\072" +
    "\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\100\uffcb\101\uffcb" +
    "\001\002\000\074\005\uffc7\022\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\041\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\063\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7" +
    "\074\uffc7\075\uffc7\076\uffc7\100\uffc7\101\uffc7\001\002\000" +
    "\004\063\uffb3\001\002\000\004\041\340\001\002\000\046" +
    "\005\126\022\130\030\136\031\117\032\121\033\157\034" +
    "\142\041\147\045\131\046\116\047\140\050\132\051\150" +
    "\052\145\053\151\054\155\100\135\101\167\001\002\000" +
    "\004\044\uffd4\001\002\000\046\005\126\022\130\030\136" +
    "\031\117\032\121\033\157\034\142\041\147\045\131\046" +
    "\116\047\140\050\132\051\150\052\145\053\151\054\155" +
    "\100\135\101\167\001\002\000\004\041\332\001\002\000" +
    "\004\041\325\001\002\000\074\005\uffcc\022\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\041\uffcc\043\uffcc\044" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\063\uffcc\067\uffcc\070\uffcc\071\uffcc\072" +
    "\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\100\uffcc\101\uffcc" +
    "\001\002\000\004\041\313\001\002\000\050\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\023\uffa9\035" +
    "\uffa9\036\uffa9\042\uffa9\062\uffa9\063\uffa9\001\002\000\050" +
    "\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\012\uff82\013" +
    "\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82\021\uff82" +
    "\023\uff82\035\uff82\036\uff82\042\uff82\062\uff82\063\uff82\001" +
    "\002\000\050\005\126\022\130\030\136\031\117\032\121" +
    "\033\157\034\142\041\147\045\131\046\116\047\140\050" +
    "\132\051\150\052\145\053\151\054\155\063\uffc4\100\135" +
    "\101\167\001\002\000\004\101\310\001\002\000\074\005" +
    "\uffc6\022\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\041\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\063\uffc6\067\uffc6" +
    "\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076" +
    "\uffc6\100\uffc6\101\uffc6\001\002\000\050\004\uff7e\005\uff7e" +
    "\006\uff7e\007\uff7e\010\uff7e\012\uff7e\013\uff7e\014\uff7e\015" +
    "\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\023\uff7e\035\uff7e" +
    "\036\uff7e\042\uff7e\062\uff7e\063\uff7e\001\002\000\004\063" +
    "\uffb5\001\002\000\074\005\uffcd\022\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\041\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\054\uffcd\063\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073" +
    "\uffcd\074\uffcd\075\uffcd\076\uffcd\100\uffcd\101\uffcd\001\002" +
    "\000\004\041\303\001\002\000\044\004\203\005\173\006" +
    "\176\007\174\010\177\012\207\013\201\014\200\015\210" +
    "\016\202\017\175\020\172\021\211\023\205\035\204\042" +
    "\uffc5\063\uffc5\001\002\000\046\005\126\022\130\030\136" +
    "\031\117\032\121\033\157\034\142\041\147\045\131\046" +
    "\116\047\140\050\132\051\150\052\145\053\151\054\155" +
    "\100\135\101\167\001\002\000\004\041\276\001\002\000" +
    "\004\041\273\001\002\000\004\041\uffbd\001\002\000\052" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\012\uffaa\013" +
    "\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa" +
    "\023\uffaa\035\uffaa\036\uffaa\042\uffaa\062\uffaa\063\uffaa\077" +
    "\263\001\002\000\102\005\126\022\130\024\007\025\017" +
    "\026\013\027\016\030\136\031\117\032\121\033\157\034" +
    "\142\041\147\043\110\044\uffcf\045\131\046\116\047\140" +
    "\050\132\051\150\052\145\053\151\054\155\063\uffc4\067" +
    "\134\071\152\072\125\073\137\074\143\075\124\076\163" +
    "\100\135\101\164\001\002\000\004\041\257\001\002\000" +
    "\072\005\126\022\130\030\136\031\117\032\121\033\157" +
    "\034\142\041\147\043\110\044\uffcf\045\131\046\116\047" +
    "\140\050\132\051\150\052\145\053\151\054\155\063\uffc4" +
    "\067\134\071\152\072\125\073\137\074\143\075\124\076" +
    "\163\100\135\101\167\001\002\000\050\004\uff7f\005\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\012\uff7f\013\uff7f\014\uff7f\015" +
    "\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\023\uff7f\035\uff7f" +
    "\036\uff7f\042\uff7f\062\uff7f\063\uff7f\001\002\000\050\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\023" +
    "\uffa8\035\uffa8\036\uffa8\042\uffa8\062\uffa8\063\uffa8\001\002" +
    "\000\074\005\uffc9\022\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\041\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\063" +
    "\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9" +
    "\075\uffc9\076\uffc9\100\uffc9\101\uffc9\001\002\000\074\005" +
    "\uffca\022\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\041\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\063\uffca\067\uffca" +
    "\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca\076" +
    "\uffca\100\uffca\101\uffca\001\002\000\004\041\244\001\002" +
    "\000\052\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\012" +
    "\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f" +
    "\021\uff8f\023\uff8f\035\uff8f\037\ufff3\041\165\063\uff8f\077" +
    "\uff8f\101\ufff3\001\002\000\050\005\uff8c\022\uff8c\030\uff8c" +
    "\031\uff8c\032\uff8c\033\uff8c\034\uff8c\041\uff8c\042\uff8c\045" +
    "\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c" +
    "\054\uff8c\100\uff8c\101\uff8c\001\002\000\050\005\126\022" +
    "\130\030\136\031\117\032\121\033\157\034\142\041\147" +
    "\042\uff86\045\131\046\116\047\140\050\132\051\150\052" +
    "\145\053\151\054\155\100\135\101\167\001\002\000\054" +
    "\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\012\uff8f\013" +
    "\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f" +
    "\023\uff8f\035\uff8f\036\uff8f\041\165\042\uff8f\062\uff8f\063" +
    "\uff8f\077\uff8f\001\002\000\004\042\243\001\002\000\044" +
    "\004\203\005\173\006\176\007\174\010\177\012\207\013" +
    "\201\014\200\015\210\016\202\017\175\020\172\021\211" +
    "\023\205\035\204\042\uff88\062\uff88\001\002\000\046\005" +
    "\126\022\130\030\136\031\117\032\121\033\157\034\142" +
    "\041\147\045\131\046\116\047\140\050\132\051\150\052" +
    "\145\053\151\054\155\100\135\101\167\001\002\000\046" +
    "\005\126\022\130\030\136\031\117\032\121\033\157\034" +
    "\142\041\147\045\131\046\116\047\140\050\132\051\150" +
    "\052\145\053\151\054\155\100\135\101\167\001\002\000" +
    "\046\005\126\022\130\030\136\031\117\032\121\033\157" +
    "\034\142\041\147\045\131\046\116\047\140\050\132\051" +
    "\150\052\145\053\151\054\155\100\135\101\167\001\002" +
    "\000\046\005\126\022\130\030\136\031\117\032\121\033" +
    "\157\034\142\041\147\045\131\046\116\047\140\050\132" +
    "\051\150\052\145\053\151\054\155\100\135\101\167\001" +
    "\002\000\046\005\126\022\130\030\136\031\117\032\121" +
    "\033\157\034\142\041\147\045\131\046\116\047\140\050" +
    "\132\051\150\052\145\053\151\054\155\100\135\101\167" +
    "\001\002\000\046\005\126\022\130\030\136\031\117\032" +
    "\121\033\157\034\142\041\147\045\131\046\116\047\140" +
    "\050\132\051\150\052\145\053\151\054\155\100\135\101" +
    "\167\001\002\000\046\005\126\022\130\030\136\031\117" +
    "\032\121\033\157\034\142\041\147\045\131\046\116\047" +
    "\140\050\132\051\150\052\145\053\151\054\155\100\135" +
    "\101\167\001\002\000\046\005\126\022\130\030\136\031" +
    "\117\032\121\033\157\034\142\041\147\045\131\046\116" +
    "\047\140\050\132\051\150\052\145\053\151\054\155\100" +
    "\135\101\167\001\002\000\046\005\126\022\130\030\136" +
    "\031\117\032\121\033\157\034\142\041\147\045\131\046" +
    "\116\047\140\050\132\051\150\052\145\053\151\054\155" +
    "\100\135\101\167\001\002\000\046\005\126\022\130\030" +
    "\136\031\117\032\121\033\157\034\142\041\147\045\131" +
    "\046\116\047\140\050\132\051\150\052\145\053\151\054" +
    "\155\100\135\101\167\001\002\000\046\005\126\022\130" +
    "\030\136\031\117\032\121\033\157\034\142\041\147\045" +
    "\131\046\116\047\140\050\132\051\150\052\145\053\151" +
    "\054\155\100\135\101\167\001\002\000\004\101\222\001" +
    "\002\000\006\042\uff83\062\215\001\002\000\046\005\126" +
    "\022\130\030\136\031\117\032\121\033\157\034\142\041" +
    "\147\045\131\046\116\047\140\050\132\051\150\052\145" +
    "\053\151\054\155\100\135\101\167\001\002\000\046\005" +
    "\126\022\130\030\136\031\117\032\121\033\157\034\142" +
    "\041\147\045\131\046\116\047\140\050\132\051\150\052" +
    "\145\053\151\054\155\100\135\101\167\001\002\000\046" +
    "\005\126\022\130\030\136\031\117\032\121\033\157\034" +
    "\142\041\147\045\131\046\116\047\140\050\132\051\150" +
    "\052\145\053\151\054\155\100\135\101\167\001\002\000" +
    "\050\004\203\005\173\006\176\007\174\010\177\012\207" +
    "\013\201\014\200\015\210\016\202\017\175\020\172\021" +
    "\uff99\023\205\035\204\036\uff99\042\uff99\062\uff99\063\uff99" +
    "\001\002\000\050\004\203\005\173\006\176\007\174\010" +
    "\177\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\023\205\035\204\036\uff9d\042\uff9d\062" +
    "\uff9d\063\uff9d\001\002\000\050\004\203\005\173\006\176" +
    "\007\174\010\177\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\017\uffa0\020\uffa0\021\uffa0\023\205\035\204\036\uffa0" +
    "\042\uffa0\062\uffa0\063\uffa0\001\002\000\046\005\126\022" +
    "\130\030\136\031\117\032\121\033\157\034\142\041\147" +
    "\045\131\046\116\047\140\050\132\051\150\052\145\053" +
    "\151\054\155\100\135\101\167\001\002\000\004\042\uff87" +
    "\001\002\000\044\004\203\005\173\006\176\007\174\010" +
    "\177\012\207\013\201\014\200\015\210\016\202\017\175" +
    "\020\172\021\211\023\205\035\204\042\uff85\062\uff85\001" +
    "\002\000\006\042\uff83\062\215\001\002\000\004\042\uff84" +
    "\001\002\000\054\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010" +
    "\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e" +
    "\020\uff8e\021\uff8e\023\uff8e\035\uff8e\036\uff8e\041\223\042" +
    "\uff8e\062\uff8e\063\uff8e\077\uff8e\001\002\000\050\005\uff8a" +
    "\022\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\041" +
    "\uff8a\042\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\100\uff8a\101\uff8a\001\002\000" +
    "\050\005\126\022\130\030\136\031\117\032\121\033\157" +
    "\034\142\041\147\042\uff86\045\131\046\116\047\140\050" +
    "\132\051\150\052\145\053\151\054\155\100\135\101\167" +
    "\001\002\000\004\042\226\001\002\000\050\004\uff89\005" +
    "\uff89\006\uff89\007\uff89\010\uff89\012\uff89\013\uff89\014\uff89" +
    "\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\023\uff89\035" +
    "\uff89\036\uff89\042\uff89\062\uff89\063\uff89\001\002\000\042" +
    "\004\203\005\173\006\176\007\174\010\177\012\207\013" +
    "\201\014\200\015\210\016\202\017\175\020\172\021\211" +
    "\023\205\035\204\036\230\001\002\000\052\004\uff8d\005" +
    "\uff8d\006\uff8d\007\uff8d\010\uff8d\012\uff8d\013\uff8d\014\uff8d" +
    "\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\023\uff8d\035" +
    "\uff8d\036\uff8d\042\uff8d\062\uff8d\063\uff8d\077\uff8d\001\002" +
    "\000\050\004\uffa6\005\uffa6\006\176\007\174\010\177\012" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\023\205\035\204\036\uffa6\042\uffa6\062\uffa6\063" +
    "\uffa6\001\002\000\050\004\203\005\173\006\176\007\174" +
    "\010\177\012\207\013\201\014\200\015\210\016\uff9c\017" +
    "\uff9c\020\uff9c\021\uff9c\023\205\035\204\036\uff9c\042\uff9c" +
    "\062\uff9c\063\uff9c\001\002\000\050\004\203\005\173\006" +
    "\176\007\174\010\177\012\uff9f\013\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\021\uff9f\023\205\035\204\036" +
    "\uff9f\042\uff9f\062\uff9f\063\uff9f\001\002\000\050\004\203" +
    "\005\173\006\176\007\174\010\177\012\uff9e\013\uff9e\014" +
    "\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\023\205" +
    "\035\204\036\uff9e\042\uff9e\062\uff9e\063\uff9e\001\002\000" +
    "\050\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021" +
    "\uffa2\023\205\035\204\036\uffa2\042\uffa2\062\uffa2\063\uffa2" +
    "\001\002\000\050\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\023\205\035\204\036\uffa4\042\uffa4\062" +
    "\uffa4\063\uffa4\001\002\000\050\004\203\005\173\006\176" +
    "\007\174\010\177\012\207\013\201\014\200\015\210\016" +
    "\uff9b\017\uff9b\020\uff9b\021\uff9b\023\205\035\204\036\uff9b" +
    "\042\uff9b\062\uff9b\063\uff9b\001\002\000\050\004\uffa3\005" +
    "\uffa3\006\uffa3\007\uffa3\010\uffa3\012\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\023\205\035" +
    "\204\036\uffa3\042\uffa3\062\uffa3\063\uffa3\001\002\000\050" +
    "\004\uffa5\005\uffa5\006\176\007\174\010\177\012\uffa5\013" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5" +
    "\023\205\035\204\036\uffa5\042\uffa5\062\uffa5\063\uffa5\001" +
    "\002\000\050\004\203\005\173\006\176\007\174\010\177" +
    "\012\207\013\201\014\200\015\210\016\202\017\175\020" +
    "\uff9a\021\uff9a\023\205\035\204\036\uff9a\042\uff9a\062\uff9a" +
    "\063\uff9a\001\002\000\050\004\uff8b\005\uff8b\006\uff8b\007" +
    "\uff8b\010\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b" +
    "\017\uff8b\020\uff8b\021\uff8b\023\uff8b\035\uff8b\036\uff8b\042" +
    "\uff8b\062\uff8b\063\uff8b\001\002\000\046\005\126\022\130" +
    "\030\136\031\117\032\121\033\157\034\142\041\147\045" +
    "\131\046\116\047\140\050\132\051\150\052\145\053\151" +
    "\054\155\100\135\101\167\001\002\000\044\004\203\005" +
    "\173\006\176\007\174\010\177\012\207\013\201\014\200" +
    "\015\210\016\202\017\175\020\172\021\211\023\205\035" +
    "\204\042\uffb1\062\uffb1\001\002\000\006\042\uffad\062\247" +
    "\001\002\000\046\005\126\022\130\030\136\031\117\032" +
    "\121\033\157\034\142\041\147\045\131\046\116\047\140" +
    "\050\132\051\150\052\145\053\151\054\155\100\135\101" +
    "\167\001\002\000\004\042\251\001\002\000\004\063\252" +
    "\001\002\000\074\005\uffb0\022\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\041\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\063\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0" +
    "\074\uffb0\075\uffb0\076\uffb0\100\uffb0\101\uffb0\001\002\000" +
    "\044\004\203\005\173\006\176\007\174\010\177\012\207" +
    "\013\201\014\200\015\210\016\202\017\175\020\172\021" +
    "\211\023\205\035\204\042\uffaf\062\uffaf\001\002\000\006" +
    "\042\uffad\062\247\001\002\000\004\042\uffae\001\002\000" +
    "\004\044\uffd0\001\002\000\046\005\126\022\130\030\136" +
    "\031\117\032\121\033\157\034\142\041\147\045\131\046" +
    "\116\047\140\050\132\051\150\052\145\053\151\054\155" +
    "\100\135\101\167\001\002\000\042\004\203\005\173\006" +
    "\176\007\174\010\177\012\207\013\201\014\200\015\210" +
    "\016\202\017\175\020\172\021\211\023\205\035\204\042" +
    "\261\001\002\000\050\004\uff90\005\uff90\006\uff90\007\uff90" +
    "\010\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017" +
    "\uff90\020\uff90\021\uff90\023\uff90\035\uff90\036\uff90\042\uff90" +
    "\062\uff90\063\uff90\001\002\000\004\044\uffd2\001\002\000" +
    "\046\005\126\022\130\030\136\031\117\032\121\033\157" +
    "\034\142\041\147\045\131\046\116\047\140\050\132\051" +
    "\150\052\145\053\151\054\155\100\135\101\167\001\002" +
    "\000\050\004\203\005\173\006\176\007\174\010\177\012" +
    "\207\013\201\014\200\015\210\016\202\017\175\020\172" +
    "\021\211\023\205\035\204\036\uffac\042\uffac\062\uffac\063" +
    "\uffac\001\002\000\004\041\266\001\002\000\046\005\126" +
    "\022\130\030\136\031\117\032\121\033\157\034\142\041" +
    "\147\045\131\046\116\047\140\050\132\051\150\052\145" +
    "\053\151\054\155\100\135\101\167\001\002\000\042\004" +
    "\203\005\173\006\176\007\174\010\177\012\207\013\201" +
    "\014\200\015\210\016\202\017\175\020\172\021\211\023" +
    "\205\035\204\042\uffbc\001\002\000\004\042\271\001\002" +
    "\000\070\005\126\022\130\030\136\031\117\032\121\033" +
    "\157\034\142\041\147\043\110\045\131\046\116\047\140" +
    "\050\132\051\150\052\145\053\151\054\155\063\uffc4\067" +
    "\134\071\152\072\125\073\137\074\143\075\124\076\163" +
    "\100\135\101\167\001\002\000\074\005\uffbb\022\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\041\uffbb\043\uffbb" +
    "\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\054\uffbb\063\uffbb\067\uffbb\070\uffbb\071\uffbb" +
    "\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\100\uffbb\101" +
    "\uffbb\001\002\000\046\005\126\022\130\030\136\031\117" +
    "\032\121\033\157\034\142\041\147\045\131\046\116\047" +
    "\140\050\132\051\150\052\145\053\151\054\155\100\135" +
    "\101\167\001\002\000\042\004\203\005\173\006\176\007" +
    "\174\010\177\012\207\013\201\014\200\015\210\016\202" +
    "\017\175\020\172\021\211\023\205\035\204\042\275\001" +
    "\002\000\050\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91" +
    "\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020" +
    "\uff91\021\uff91\023\uff91\035\uff91\036\uff91\042\uff91\062\uff91" +
    "\063\uff91\001\002\000\046\005\126\022\130\030\136\031" +
    "\117\032\121\033\157\034\142\041\147\045\131\046\116" +
    "\047\140\050\132\051\150\052\145\053\151\054\155\100" +
    "\135\101\167\001\002\000\042\004\203\005\173\006\176" +
    "\007\174\010\177\012\207\013\201\014\200\015\210\016" +
    "\202\017\175\020\172\021\211\023\205\035\204\042\300" +
    "\001\002\000\050\004\uff93\005\uff93\006\uff93\007\uff93\010" +
    "\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93" +
    "\020\uff93\021\uff93\023\uff93\035\uff93\036\uff93\042\uff93\062" +
    "\uff93\063\uff93\001\002\000\042\004\203\005\173\006\176" +
    "\007\174\010\177\012\207\013\201\014\200\015\210\016" +
    "\202\017\175\020\172\021\211\023\205\035\204\042\302" +
    "\001\002\000\050\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\021\uffa7\023\uffa7\035\uffa7\036\uffa7\042\uffa7\062" +
    "\uffa7\063\uffa7\001\002\000\046\005\126\022\130\030\136" +
    "\031\117\032\121\033\157\034\142\041\147\045\131\046" +
    "\116\047\140\050\132\051\150\052\145\053\151\054\155" +
    "\100\135\101\167\001\002\000\042\004\203\005\173\006" +
    "\176\007\174\010\177\012\207\013\201\014\200\015\210" +
    "\016\202\017\175\020\172\021\211\023\205\035\204\042" +
    "\305\001\002\000\050\004\uff92\005\uff92\006\uff92\007\uff92" +
    "\010\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017" +
    "\uff92\020\uff92\021\uff92\023\uff92\035\uff92\036\uff92\042\uff92" +
    "\062\uff92\063\uff92\001\002\000\004\063\307\001\002\000" +
    "\074\005\uffb4\022\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\041\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\063\uffb4" +
    "\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075" +
    "\uffb4\076\uffb4\100\uffb4\101\uffb4\001\002\000\050\004\uff95" +
    "\005\uff95\006\uff95\007\uff95\010\uff95\012\uff95\013\uff95\014" +
    "\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\023\uff95" +
    "\035\uff95\036\uff95\042\uff95\062\uff95\063\uff95\001\002\000" +
    "\004\063\312\001\002\000\074\005\uffb6\022\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\041\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\054\uffb6\063\uffb6\067\uffb6\070\uffb6\071\uffb6\072" +
    "\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\100\uffb6\101\uffb6" +
    "\001\002\000\046\005\126\022\130\030\136\031\117\032" +
    "\121\033\157\034\142\041\147\045\131\046\116\047\140" +
    "\050\132\051\150\052\145\053\151\054\155\100\135\101" +
    "\167\001\002\000\042\004\203\005\173\006\176\007\174" +
    "\010\177\012\207\013\201\014\200\015\210\016\202\017" +
    "\175\020\172\021\211\023\205\035\204\042\uffc3\001\002" +
    "\000\004\042\316\001\002\000\070\005\126\022\130\030" +
    "\136\031\117\032\121\033\157\034\142\041\147\043\110" +
    "\045\131\046\116\047\140\050\132\051\150\052\145\053" +
    "\151\054\155\063\uffc4\067\134\071\152\072\125\073\137" +
    "\074\143\075\124\076\163\100\135\101\167\001\002\000" +
    "\074\005\uffc2\022\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\041\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\063\uffc2" +
    "\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075" +
    "\uffc2\076\uffc2\100\uffc2\101\uffc2\001\002\000\074\005\uffbe" +
    "\022\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\041" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\054\uffbe\063\uffbe\067\uffbe\070" +
    "\321\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe" +
    "\100\uffbe\101\uffbe\001\002\000\070\005\uffc0\022\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\041\uffc0\043\uffc0" +
    "\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\063\uffc0\067\uffc0\071\uffc0\072\uffc0\073\uffc0" +
    "\074\uffc0\075\uffc0\076\uffc0\100\uffc0\101\uffc0\001\002\000" +
    "\074\005\uffc1\022\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\041\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\063\uffc1" +
    "\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075" +
    "\uffc1\076\uffc1\100\uffc1\101\uffc1\001\002\000\070\005\126" +
    "\022\130\030\136\031\117\032\121\033\157\034\142\041" +
    "\147\043\110\045\131\046\116\047\140\050\132\051\150" +
    "\052\145\053\151\054\155\063\uffc4\067\134\071\152\072" +
    "\125\073\137\074\143\075\124\076\163\100\135\101\167" +
    "\001\002\000\074\005\uffbf\022\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\041\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\063\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf" +
    "\074\uffbf\075\uffbf\076\uffbf\100\uffbf\101\uffbf\001\002\000" +
    "\046\005\126\022\130\030\136\031\117\032\121\033\157" +
    "\034\142\041\147\045\131\046\116\047\140\050\132\051" +
    "\150\052\145\053\151\054\155\100\135\101\167\001\002" +
    "\000\042\004\203\005\173\006\176\007\174\010\177\012" +
    "\207\013\201\014\200\015\210\016\202\017\175\020\172" +
    "\021\211\023\205\035\204\062\327\001\002\000\014\024" +
    "\007\025\017\026\013\027\016\101\021\001\002\000\006" +
    "\037\075\042\331\001\002\000\050\004\uff94\005\uff94\006" +
    "\uff94\007\uff94\010\uff94\012\uff94\013\uff94\014\uff94\015\uff94" +
    "\016\uff94\017\uff94\020\uff94\021\uff94\023\uff94\035\uff94\036" +
    "\uff94\042\uff94\062\uff94\063\uff94\001\002\000\004\042\333" +
    "\001\002\000\050\004\uff97\005\uff97\006\uff97\007\uff97\010" +
    "\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97" +
    "\020\uff97\021\uff97\023\uff97\035\uff97\036\uff97\042\uff97\062" +
    "\uff97\063\uff97\001\002\000\050\004\uff98\005\uff98\006\uff98" +
    "\007\uff98\010\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016" +
    "\uff98\017\uff98\020\uff98\021\uff98\023\205\035\204\036\uff98" +
    "\042\uff98\062\uff98\063\uff98\001\002\000\004\044\336\001" +
    "\002\000\122\002\uffd3\005\uffd3\022\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\041\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\057\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3" +
    "\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076" +
    "\uffd3\100\uffd3\101\uffd3\001\002\000\050\004\uffa1\005\uffa1" +
    "\006\uffa1\007\uffa1\010\uffa1\012\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\023\205\035\204" +
    "\036\uffa1\042\uffa1\062\uffa1\063\uffa1\001\002\000\050\005" +
    "\126\022\130\030\136\031\117\032\121\033\157\034\142" +
    "\041\147\045\131\046\116\047\140\050\132\051\150\052" +
    "\145\053\151\054\155\063\uffc4\100\135\101\167\001\002" +
    "\000\004\063\uffba\001\002\000\004\063\343\001\002\000" +
    "\046\005\126\022\130\030\136\031\117\032\121\033\157" +
    "\034\142\041\147\045\131\046\116\047\140\050\132\051" +
    "\150\052\145\053\151\054\155\100\135\101\167\001\002" +
    "\000\042\004\203\005\173\006\176\007\174\010\177\012" +
    "\207\013\201\014\200\015\210\016\202\017\175\020\172" +
    "\021\211\023\205\035\204\063\uffb9\001\002\000\004\063" +
    "\346\001\002\000\050\005\126\022\130\030\136\031\117" +
    "\032\121\033\157\034\142\041\147\042\uffc4\045\131\046" +
    "\116\047\140\050\132\051\150\052\145\053\151\054\155" +
    "\100\135\101\167\001\002\000\004\042\uffb8\001\002\000" +
    "\004\042\351\001\002\000\070\005\126\022\130\030\136" +
    "\031\117\032\121\033\157\034\142\041\147\043\110\045" +
    "\131\046\116\047\140\050\132\051\150\052\145\053\151" +
    "\054\155\063\uffc4\067\134\071\152\072\125\073\137\074" +
    "\143\075\124\076\163\100\135\101\167\001\002\000\074" +
    "\005\uffb7\022\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\041\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\063\uffb7\067" +
    "\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7" +
    "\076\uffb7\100\uffb7\101\uffb7\001\002\000\004\063\354\001" +
    "\002\000\074\005\uffb2\022\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\041\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\063\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074" +
    "\uffb2\075\uffb2\076\uffb2\100\uffb2\101\uffb2\001\002\000\004" +
    "\042\356\001\002\000\050\004\uff96\005\uff96\006\uff96\007" +
    "\uff96\010\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96" +
    "\017\uff96\020\uff96\021\uff96\023\uff96\035\uff96\036\uff96\042" +
    "\uff96\062\uff96\063\uff96\001\002\000\074\005\uffce\022\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\041\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\063\uffce\067\uffce\070\uffce\071" +
    "\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce\100\uffce" +
    "\101\uffce\001\002\000\004\002\001\001\002\000\120\002" +
    "\ufff9\005\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\041\ufff9\043" +
    "\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\063" +
    "\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\071\ufff9\072\ufff9" +
    "\073\ufff9\074\ufff9\075\ufff9\076\ufff9\100\ufff9\101\ufff9\001" +
    "\002\000\024\002\ufffe\024\007\025\017\026\013\027\016" +
    "\055\014\056\023\057\020\101\021\001\002\000\004\002" +
    "\000\001\002\000\004\002\uffff\001\002\000\006\041\366" +
    "\063\ufff8\001\002\000\016\024\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\042\ufff1\101\ufff1\001\002\000\016\024\007\025\017" +
    "\026\013\027\016\042\uffec\101\021\001\002\000\004\042" +
    "\ufff0\001\002\000\004\042\372\001\002\000\004\043\110" +
    "\001\002\000\034\002\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\044\uffef\055\uffef\056\uffef\057\uffef\064\uffef\065\uffef" +
    "\066\uffef\101\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\022\002\011\004\007\005\005\006\010\007" +
    "\021\012\014\021\004\045\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\362\004\361\005\005\006\010\007\021\012\014" +
    "\021\004\045\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\025\001\001\000\002\001\001\000\004\014\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\034\001\001\000\002\001\001\000\010\016\037\017\040" +
    "\020\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\046\017\040\020\041\001\001\000\012\005\044" +
    "\006\010\007\045\045\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\054\023\056\045\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\057\023\056\045\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\064\010\063\045\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\066\001\001" +
    "\000\006\006\067\045\062\001\001\000\002\001\001\000" +
    "\004\011\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\064\010\100" +
    "\045\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\064\010\105" +
    "\045\062\001\001\000\002\001\001\000\004\024\110\001" +
    "\001\000\004\054\111\001\001\000\002\001\001\000\050" +
    "\005\153\006\010\024\140\025\126\027\114\030\155\031" +
    "\113\032\143\034\132\035\121\036\112\037\161\040\160" +
    "\041\122\045\062\046\152\047\145\050\117\051\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\067\352\001\001\000\002\001\001\000\012\046\152\047" +
    "\336\050\117\051\157\001\001\000\004\055\334\001\001" +
    "\000\012\046\152\047\333\050\117\051\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\031" +
    "\310\046\152\047\145\050\117\051\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\046\152\047\300\050\117\051\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\264" +
    "\001\001\000\002\001\001\000\050\005\153\006\010\024" +
    "\140\025\261\027\114\030\155\031\113\032\143\034\132" +
    "\035\121\036\112\037\161\040\160\041\122\045\062\046" +
    "\152\047\145\050\117\051\157\001\001\000\002\001\001" +
    "\000\040\024\140\027\255\030\155\031\113\032\143\034" +
    "\132\035\121\036\112\037\161\040\160\041\122\046\152" +
    "\047\145\050\117\051\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\165\001\001\000" +
    "\014\044\167\046\152\047\170\050\117\051\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\074\205\001" +
    "\001\000\012\046\152\047\241\050\117\051\157\001\001" +
    "\000\012\046\152\047\240\050\117\051\157\001\001\000" +
    "\012\046\152\047\237\050\117\051\157\001\001\000\012" +
    "\046\152\047\236\050\117\051\157\001\001\000\012\046" +
    "\152\047\235\050\117\051\157\001\001\000\012\046\152" +
    "\047\234\050\117\051\157\001\001\000\012\046\152\047" +
    "\233\050\117\051\157\001\001\000\012\046\152\047\232" +
    "\050\117\051\157\001\001\000\012\046\152\047\231\050" +
    "\117\051\157\001\001\000\012\046\152\047\230\050\117" +
    "\051\157\001\001\000\012\046\152\047\226\050\117\051" +
    "\157\001\001\000\002\001\001\000\004\043\215\001\001" +
    "\000\012\046\152\047\213\050\117\051\157\001\001\000" +
    "\012\046\152\047\212\050\117\051\157\001\001\000\012" +
    "\046\152\047\211\050\117\051\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\046\152" +
    "\047\216\050\117\051\157\001\001\000\002\001\001\000" +
    "\004\075\217\001\001\000\004\043\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\073\223\001\001\000" +
    "\014\044\224\046\152\047\170\050\117\051\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\046\152\047" +
    "\244\050\117\051\157\001\001\000\004\070\245\001\001" +
    "\000\004\042\247\001\001\000\012\046\152\047\252\050" +
    "\117\051\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\253\001\001\000\004\042" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\046\152\047\257\050\117\051\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\046\152" +
    "\047\263\050\117\051\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\046\152\047\266\050\117\051\157" +
    "\001\001\000\004\062\267\001\001\000\002\001\001\000" +
    "\036\024\140\030\271\031\113\032\143\034\132\035\121" +
    "\036\112\037\161\040\160\041\122\046\152\047\145\050" +
    "\117\051\157\001\001\000\002\001\001\000\012\046\152" +
    "\047\273\050\117\051\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\046\152\047\276\050\117\051\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\046\152\047\303\050\117" +
    "\051\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\046\152\047\313\050" +
    "\117\051\157\001\001\000\004\056\314\001\001\000\002" +
    "\001\001\000\036\024\140\030\316\031\113\032\143\034" +
    "\132\035\121\036\112\037\161\040\160\041\122\046\152" +
    "\047\145\050\117\051\157\001\001\000\004\057\317\001" +
    "\001\000\004\033\321\001\001\000\004\060\322\001\001" +
    "\000\002\001\001\000\036\024\140\030\323\031\113\032" +
    "\143\034\132\035\121\036\112\037\161\040\160\041\122" +
    "\046\152\047\145\050\117\051\157\001\001\000\002\001" +
    "\001\000\012\046\152\047\325\050\117\051\157\001\001" +
    "\000\002\001\001\000\004\045\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\031\340\046\152\047\145\050\117" +
    "\051\157\001\001\000\004\063\341\001\001\000\002\001" +
    "\001\000\012\046\152\047\343\050\117\051\157\001\001" +
    "\000\004\064\344\001\001\000\002\001\001\000\014\031" +
    "\346\046\152\047\145\050\117\051\157\001\001\000\004" +
    "\065\347\001\001\000\002\001\001\000\036\024\140\030" +
    "\351\031\113\032\143\034\132\035\121\036\112\037\161" +
    "\040\160\041\122\046\152\047\145\050\117\051\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\363\004\361" +
    "\005\005\006\010\007\021\012\014\021\004\045\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\366\001\001\000\010\006\064\010\367\045" +
    "\062\001\001\000\004\053\370\001\001\000\002\001\001" +
    "\000\004\024\372\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }


	private MyScanner scanner;
	public parser (MyScanner scanner){
		this.scanner = scanner;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Decl DeclStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclStar ::= Decl DeclStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VariableDecl ::= Variable SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Variable ::= Type IDENTIFIER 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if ( ParserPhase.getInstance().getPhase() == 0 ) {
//								if ( ParserHelper.getInstance().insideFunctionFormals )
								if ( type instanceof Type ) {
									Type t = (Type) type;
									String name = IDGenerator.getInstance().getNextID();
									Descriptor temp = new Descriptor( name, t );
									SymbolTable.getInstance().getSymbolTable().addEntry( id, temp );
									if ( ParserHelper.getInstance().insideFunctionFormals ) {
										int prevCount = (int) SemanticStack.getInstance().popDescriptor();
										SemanticStack.getInstance().pushDescriptor( temp );
										SemanticStack.getInstance().pushDescriptor( id );
										SemanticStack.getInstance().pushDescriptor( prevCount + 1 );
									}
									CodeGen.getInstance().addToData( name, Type.getMipsType( t ), Integer.toString( 0 ) );
								}
								else if ( type instanceof ArrayType ) {
									ArrayType t = (ArrayType) type;
									String name = IDGenerator.getInstance().getNextID();
									Descriptor temp = new ArrayDescriptor( name, t );
									SymbolTable.getInstance().getSymbolTable().addEntry( id, temp );
									if ( ParserHelper.getInstance().insideFunctionFormals ) {
                                        int prevCount = (int) SemanticStack.getInstance().popDescriptor();
                                        SemanticStack.getInstance().pushDescriptor( temp );
                                        SemanticStack.getInstance().pushDescriptor( id );
                                        SemanticStack.getInstance().pushDescriptor( prevCount + 1 );
                                    }
									CodeGen.getInstance().addToData( name, Type.getMipsType( t ), Integer.toString( 0 ) );
								}
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = Type.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = Type.DOUBLE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = Type.BOOL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = Type.STRING; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= IDENTIFIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Type.OBJECT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= Type OPENCLOSEBRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( t == Type.INT || t == Type.DOUBLE || t == Type.BOOL
									|| t == Type.STRING || t == Type.OBJECT )
								RESULT = new ArrayType( (Type) t, 1 );
							else if ( t instanceof ArrayType ) {
									ArrayType temp = (ArrayType) t;
									RESULT = new ArrayType( temp.getSubType(), temp.getDimensionCount() + 1 );
								}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 0 ) {
								SymbolTable.getInstance().getSymbolTable().addEntry(
										name,
										new FunctionDescriptor(
												name,
												"_" + IDGenerator.getInstance().getNextID(),
												(Type) t
										)
								);
								SymbolTable.getInstance().makeNextAndSwitch( name );
							}
							else if ( phase == 1 ) {
								FunctionDescriptor temp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( name );
								CodeGen.getInstance().addToText(
										temp.getFunctionName() + ":\n",
										true
								);
								SymbolTable.getInstance().switchToNext();
							}
							ParserHelper.getInstance().insideFunctionFormals = true;
							SemanticStack.getInstance().pushDescriptor( 0 );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 0 ) {
								int formalsCount = (int) SemanticStack.getInstance().popDescriptor();
								for ( int i = 0; i < formalsCount; i++ ) {
									FunctionDescriptor funcDscp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( name );
									String argumentName = (String) SemanticStack.getInstance().popDescriptor();
									Descriptor argumentDescriptor = (Descriptor) SemanticStack.getInstance().popDescriptor();
									funcDscp.addArgument( argumentName, argumentDescriptor, true );
								}
//								SymbolTable.getInstance().makeNextAndSwitch();
							}
							else if ( phase == 1 ) {
								FunctionDescriptor funcDscp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( name );
								ParserHelper.getInstance().currentFunctionDscp = funcDscp;
//								SymbolTable.getInstance().switchToNext();
							}
							ParserHelper.getInstance().insideFunctionFormals = false;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FunctionDecl ::= Type IDENTIFIER OPENPARENTHESIS NT$0 Formals NT$1 CLOSEPARENTHESIS StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
//							SymbolTable.getInstance().goBack();
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
//								SemanticStack.getInstance().popDescriptor(); // was for return stmt
								if ( SymbolTable.getInstance().getSymbolTable().getScopeName().equals( "main" )
										&& SymbolTable.getInstance().getSymbolTable().getEntryCount() == 0
										&& ( (Type) t ) == Type.INT ) {
	                                CodeGen.getInstance().addToText( "# Exit!" );
	                                CodeGen.getInstance().addToText( "li $v0, 10" );
	                                CodeGen.getInstance().addToText( "syscall" );
	                                CodeGen.getInstance().addEmptyLine();
	                                CodeGen.getInstance().addEmptyLine();
                                }
                                else {
                                    CodeGen.getInstance().addToText( "# returning from function " + name );
                                    CodeGen.getInstance().addToText( "jr $ra" );
                                    CodeGen.getInstance().addEmptyLine();
                                }
							}
							SymbolTable.getInstance().goBack();
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FunctionDecl ::= VOID IDENTIFIER OPENPARENTHESIS Formals CLOSEPARENTHESIS StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Formals ::= Variable CommaVariables 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Formals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CommaVariables ::= COMMA Variable CommaVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaVariables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CommaVariables ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaVariables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassDecl ::= CLASS IDENTIFIER ClassDeclExtends ClassDeclImplements OPENCURLYBRACES FieldStar CLOSECURLYBRACES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassDeclExtends ::= EXTENDS IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclExtends",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDeclExtends ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclExtends",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDeclImplements ::= IMPLEMENTS IDENTIFIER CommaIdentifiers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclImplements",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDeclImplements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclImplements",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CommaIdentifiers ::= COMMA IDENTIFIER CommaIdentifiers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaIdentifiers",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CommaIdentifiers ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaIdentifiers",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FieldStar ::= Field FieldStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FieldStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Field ::= AccessMode VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Field ::= AccessMode FunctionDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AccessMode ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AccessMode ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AccessMode ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AccessMode ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InterfaceDecl ::= INTERFACE IDENTIFIER OPENCURLYBRACES PrototypeStar CLOSECURLYBRACES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PrototypeStar ::= Prototype PrototypeStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PrototypeStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Prototype ::= Type IDENTIFIER OPENPARENTHESIS Formals CLOSEPARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Prototype ::= VOID IDENTIFIER OPENPARENTHESIS Formals CLOSEPARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$2 ::= 
            {
              Object RESULT =null;

							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 0 )
								SymbolTable.getInstance().makeNextAndSwitch();
							else if ( phase == 1 )
								SymbolTable.getInstance().switchToNext();
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							SymbolTable.getInstance().goBack();
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // StmtBlock ::= OPENCURLYBRACES NT$2 InsideStmtBlock NT$3 CLOSECURLYBRACES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtBlock",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // InsideStmtBlock ::= VariableDecl InsideStmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InsideStmtBlock",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // InsideStmtBlock ::= StmtStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InsideStmtBlock",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // StmtStar ::= Stmt StmtStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StmtStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stmt ::= ExprPrime SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= ContinueStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExprPrime ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprPrime",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExprPrime ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprPrime",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 0 )
                                SymbolTable.getInstance().makeNextAndSwitch( SymbolTable.getInstance().getSymbolTable().getScopeName() + "_if");
                            else if ( phase == 1 ) {
                                SymbolTable.getInstance().switchToNext();
                                SemanticStack.getInstance().pushDescriptor( e );
                                IfCodeGen.getInstance().cgen();
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            SymbolTable.getInstance().goBack();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IfStmt ::= IF OPENPARENTHESIS Expr NT$4 CLOSEPARENTHESIS Stmt NT$5 ElsePrime 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$6 ::= 
            {
              Object RESULT =null;

                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 0 )
                                SymbolTable.getInstance().makeNextAndSwitch( SymbolTable.getInstance().getSymbolTable().getScopeName() + "_if");
                            else if ( phase == 1 ) {
                                SymbolTable.getInstance().switchToNext();
                                String elseLabel = (String)LabelStack.getInstance().popLabel();
                                String endLabel = (String)LabelStack.getInstance().popLabel();
                                CodeGen.getInstance().addToText("b " + endLabel);
                                CodeGen.getInstance().addToText(elseLabel + ":\n", true);
                                LabelStack.getInstance().pushLabel("if", endLabel);
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ElsePrime ::= ELSE NT$6 Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                String endLabel = (String)LabelStack.getInstance().popLabel();
                                CodeGen.getInstance().addToText(endLabel + ":\n", true);
                            }
                            SymbolTable.getInstance().goBack();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElsePrime",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ElsePrime ::= 
            {
              Object RESULT =null;
		
						    int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {

                                String elseLabel = (String)LabelStack.getInstance().popLabel();
                                String endLabel = (String)LabelStack.getInstance().popLabel();
                                System.out.println("elseLabel " + elseLabel);
                                CodeGen.getInstance().addToText(elseLabel + ":\n", true);
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElsePrime",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$7 ::= 
            {
              Object RESULT =null;

                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 0 )
                                SymbolTable.getInstance().makeNextAndSwitch( SymbolTable.getInstance().getSymbolTable().getScopeName() + "_if");
                            else if ( phase == 1 ) {
                                SymbolTable.getInstance().switchToNext();
                                String whileLabel = "while" + "_" + IDGenerator.getInstance().getNextID();
                                LabelStack.getInstance().pushLabel("while", whileLabel);
                                CodeGen.getInstance().addToText(whileLabel + ":\n", true);
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor(e);
                                WhileCodeGen.getInstance().cgen();
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // WhileStmt ::= WHILE NT$7 OPENPARENTHESIS Expr NT$8 CLOSEPARENTHESIS Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                String endWhileLabel = (String)LabelStack.getInstance().popLabel();
                                String whileLabel = (String)LabelStack.getInstance().popLabel();
                                CodeGen.getInstance().addToText("b " + whileLabel);
                                CodeGen.getInstance().addToText(endWhileLabel + ":\n", true);
                            }
                            SymbolTable.getInstance().goBack();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$9 ::= 
            {
              Object RESULT =null;

                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 0 )
                                SymbolTable.getInstance().makeNextAndSwitch( SymbolTable.getInstance().getSymbolTable().getScopeName() + "_if");
                            else if ( phase == 1 ) {
                                SymbolTable.getInstance().switchToNext();
                                String exprFor = IDGenerator.getInstance().getNextID();
                                LabelStack.getInstance().pushLabel("for", exprFor);
                                CodeGen.getInstance().addToText(exprFor + ":\n", true);
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            SemanticStack.getInstance().pushDescriptor(e);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;


                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ForStmt ::= FOR OPENPARENTHESIS ExprPrime NT$9 SEMICOLON Expr NT$10 SEMICOLON ExprPrime NT$11 CLOSEPARENTHESIS Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ReturnStmt ::= RETURN ExprPrime SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
//								System.out.println( SemanticStack.getInstance().topDescriptor() );
//								FunctionDescriptor funcDscp = (FunctionDescriptor) SemanticStack.getInstance().topDescriptor();
								FunctionDescriptor funcDscp = ParserHelper.getInstance().currentFunctionDscp;
								if ( funcDscp == null )
									throw new InvalidReturnStatement();
								SemanticStack.getInstance().pushDescriptor( e );
                                SemanticStack.getInstance().pushDescriptor( funcDscp );
                                FunctionReturnStatement.getInstance().cgen();
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$12 ::= 
            {
              Object RESULT =null;

                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                String endWhileLabel = (String)LabelStack.getInstance().popLabel("while", 0);
                                System.out.println("breakLabel " + endWhileLabel);
                                CodeGen.getInstance().addToText("b " + endWhileLabel);
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BreakStmt ::= BREAK NT$12 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$13 ::= 
            {
              Object RESULT =null;

                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                String whileBegin = (String)LabelStack.getInstance().popLabel("while", 1);
                                System.out.println("whileBegin " + whileBegin);
                                CodeGen.getInstance().addToText("b " + whileBegin);
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ContinueStmt ::= CONTINUE NT$13 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContinueStmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$14 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								PrintCodeGen.getInstance().cgen();
							}
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PrintStmt ::= PRINT OPENPARENTHESIS Expr NT$14 PrintCommaExpr CLOSEPARENTHESIS SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$15 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								PrintCodeGen.getInstance().cgen();
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PrintCommaExpr ::= COMMA Expr NT$15 PrintCommaExpr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintCommaExpr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PrintCommaExpr ::= 
            {
              Object RESULT =null;
		
							if ( ParserPhase.getInstance().getPhase() == 1 )
								PrintCodeGen.getInstance().printEnter();
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintCommaExpr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= LValue ASSIGN Expr 
            {
              Descriptor RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor lv = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								SemanticStack.getInstance().pushDescriptor( lv );
								AssignmentCodeGen.getInstance().cgen();
//								ParserHelper.getInstance().isLValueArray = false;
							}
							RESULT = new Descriptor( "", Type.DUMMY );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Constant 
            {
              Descriptor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompileTimeDescriptor c = (CompileTimeDescriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SymbolTable.getInstance().getSymbolTable().addEntry( c.getName(), c );
								Type type = c.getType();
								if ( type == Type.INT || type == Type.DOUBLE || type == Type.BOOL )
									CodeGen.getInstance().addToData(
										c.getName(),
										Type.getMipsType( type ),
										c.getValue().toString()
									);
								else if ( type == Type.STRINGLITERAL ) {
									CodeGen.getInstance().addToData(
										c.getName(),
										Type.getMipsType( type ),
										Integer.toString( c.getValue().toString().length() )
									);
									SemanticStack.getInstance().pushDescriptor( c );
									StringLiteralCodeGen.getInstance().cgen();
								}
							}
							RESULT = c;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= LValue 
            {
              Descriptor RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor lv = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= THIS 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Call 
            {
              Descriptor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor c = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= OPENPARENTHESIS Expr CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr PLUS Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e1 );
								SemanticStack.getInstance().pushDescriptor( e2 );
								PlusCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr MINUS Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e1 );
								SemanticStack.getInstance().pushDescriptor( e2 );
								MinusCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr MULTIPLY Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e1 );
								SemanticStack.getInstance().pushDescriptor( e2 );
								MultiplyCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr DIVIDE Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e1 );
								SemanticStack.getInstance().pushDescriptor( e2 );
								SemanticStack.getInstance().pushDescriptor( "quotient" );
								DivideCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr MOD Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e1 );
                                SemanticStack.getInstance().pushDescriptor( e2 );
                                SemanticStack.getInstance().pushDescriptor( "mod" );
                                DivideCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= MINUS Expr 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e );
                                UnaryMinusCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= Expr LESS Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e1 );
                                SemanticStack.getInstance().pushDescriptor( e2 );
                                LessCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Expr LESSEQUAL Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             int phase = ParserPhase.getInstance().getPhase();
                             if ( phase == 1 ) {
                                 SemanticStack.getInstance().pushDescriptor( e1 );
                                 SemanticStack.getInstance().pushDescriptor( e2 );
                                 LessEqualCodeGen.getInstance().cgen();
                                 Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                 RESULT = temp;
                             }
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= Expr GREATER Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e1 );
                                SemanticStack.getInstance().pushDescriptor( e2 );
                                GreaterCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= Expr GREATEREQUAL Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             int phase = ParserPhase.getInstance().getPhase();
                             if ( phase == 1 ) {
                                 SemanticStack.getInstance().pushDescriptor( e1 );
                                 SemanticStack.getInstance().pushDescriptor( e2 );
                                 GreaterEqualCodeGen.getInstance().cgen();
                                 Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                 RESULT = temp;
                             }
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= Expr EQUAL Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              int phase = ParserPhase.getInstance().getPhase();
                              if ( phase == 1 ) {
                                  SemanticStack.getInstance().pushDescriptor( e1 );
                                  SemanticStack.getInstance().pushDescriptor( e2 );
                                  EqualCodeGen.getInstance().cgen();
                                  Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                  RESULT = temp;
                              }
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= Expr NOTEQUAL Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               int phase = ParserPhase.getInstance().getPhase();
                               if ( phase == 1 ) {
                                   SemanticStack.getInstance().pushDescriptor( e1 );
                                   SemanticStack.getInstance().pushDescriptor( e2 );
                                   NotEqualCodeGen.getInstance().cgen();
                                   Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                   RESULT = temp;
                               }
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr ::= Expr AND Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              int phase = ParserPhase.getInstance().getPhase();
                              if ( phase == 1 ) {
                                  SemanticStack.getInstance().pushDescriptor( e1 );
                                  SemanticStack.getInstance().pushDescriptor( e2 );
                                  AndCodeGen.getInstance().cgen();
                                  Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                  RESULT = temp;
                              }
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr ::= Expr OR Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             int phase = ParserPhase.getInstance().getPhase();
                             if ( phase == 1 ) {
                                 SemanticStack.getInstance().pushDescriptor( e1 );
                                 SemanticStack.getInstance().pushDescriptor( e2 );
                                 OrCodeGen.getInstance().cgen();
                                 Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                 RESULT = temp;
                             }
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= NOT Expr 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          int phase = ParserPhase.getInstance().getPhase();
                          if ( phase == 1 ) {
                              SemanticStack.getInstance().pushDescriptor( e );
                              NotCodeGen.getInstance().cgen();
                              Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                              RESULT = temp;
                          }
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expr ::= READINTEGER OPENPARENTHESIS CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								IntegerInputCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expr ::= READLINE OPENPARENTHESIS CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
	                            StringInputCodeGen.getInstance().cgen();
	                            Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
	                            RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expr ::= NEW IDENTIFIER 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expr ::= NEWARRAY OPENPARENTHESIS Expr COMMA Type CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								ValidArraySizeCheckerCodeGen.getInstance().cgen();
								SemanticStack.getInstance().pushDescriptor( e );
								SemanticStack.getInstance().pushDescriptor( t );
								NewArrayCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Expr ::= ITOD OPENPARENTHESIS Expr CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								itodCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expr ::= DTOI OPENPARENTHESIS Expr CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e );
                                dtoiCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Expr ::= ITOB OPENPARENTHESIS Expr CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e );
                                itobCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Expr ::= BTOI OPENPARENTHESIS Expr CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e );
                                btoiCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LValue ::= IDENTIFIER 
            {
              Descriptor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = SymbolTable.getInstance().getSymbolTable().getDescriptor( id );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LValue ::= Expr DOT IDENTIFIER 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LValue ::= Expr OPENBRACKET Expr CLOSEBRACKET 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
//								ParserHelper.getInstance().isLValueArray = true;
								SemanticStack.getInstance().pushDescriptor( e2 );
								SemanticStack.getInstance().pushDescriptor( e1 );
								ArrayGetIndexValueCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$16 ::= 
            {
              Descriptor RESULT =null;
		int functionIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int functionIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String functionID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							if ( ParserPhase.getInstance().getPhase() == 1 )
								SemanticStack.getInstance().pushDescriptor( 0 );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Call ::= IDENTIFIER OPENPARENTHESIS NT$16 Actuals CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Descriptor) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int functionIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int functionIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String functionID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                int actualsCount = (int) SemanticStack.getInstance().popDescriptor();
                                FunctionDescriptor funcDscp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( functionID );
                                if ( actualsCount != funcDscp.getArgumentCount() )
                                    throw new FunctionInputMismatch( functionID );
                                SaveLocalVariablesCodeGen.getInstance().cgen();
                                for ( int i = 0; i < actualsCount; i++ ) {
                                    Descriptor actualDescriptor = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                    Descriptor formalDescriptor = funcDscp.getArgumentDescriptor( actualsCount - i - 1 );
                                    if ( actualDescriptor.getType() != formalDescriptor.getType() )
                                        throw new FunctionInputMismatch( functionID );
                                    SemanticStack.getInstance().pushDescriptor( i );
                                    SemanticStack.getInstance().pushDescriptor( actualDescriptor );
                                    SemanticStack.getInstance().pushDescriptor( formalDescriptor );
                                    FunctionArgumentCodeGen.getInstance().cgen();
                                }
                                SemanticStack.getInstance().pushDescriptor( funcDscp );
                                FunctionCallCodeGen.getInstance().cgen();
                                SemanticStack.getInstance().pushDescriptor( funcDscp );
                                FunctionValueRetrieveCodeGen.getInstance().cgen();
                                FunctionCallEndedCodeGen.getInstance().cgen();
                                LoadLocalVariablesCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$17 ::= 
            {
              Descriptor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							if ( ParserPhase.getInstance().getPhase() == 1 )
                                SemanticStack.getInstance().pushDescriptor( 0 );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Call ::= Expr DOT IDENTIFIER OPENPARENTHESIS NT$17 Actuals CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Descriptor) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								int actualsCount = (int) SemanticStack.getInstance().topDescriptor();
								if ( e.getType() == Type.ARRAY && actualsCount == 0 && id.equals( "length" ) ) {
									SemanticStack.getInstance().popDescriptor();
									SemanticStack.getInstance().pushDescriptor( e );
									ArraySizeCodeGen.getInstance().cgen();
									Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
									RESULT = temp;
								}
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$18 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                int prevCount = (int) SemanticStack.getInstance().popDescriptor();
                                SemanticStack.getInstance().pushDescriptor( e );
                                SemanticStack.getInstance().pushDescriptor( prevCount + 1 );
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Actuals ::= Expr NT$18 ActualsCommaExpr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$19 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								int prevCount = (int) SemanticStack.getInstance().popDescriptor();
	                            SemanticStack.getInstance().pushDescriptor( e );
	                            SemanticStack.getInstance().pushDescriptor( prevCount + 1 );
                            }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ActualsCommaExpr ::= COMMA Expr NT$19 ActualsCommaExpr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActualsCommaExpr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ActualsCommaExpr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActualsCommaExpr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Constant ::= DECIMAL 
            {
              CompileTimeDescriptor RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = new CompileTimeDescriptor(
									"_" + IDGenerator.getInstance().getNextID(),
									Type.INT,
									Integer.parseInt( d )
								);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Constant ::= FLOATINGPOINT 
            {
              CompileTimeDescriptor RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = new CompileTimeDescriptor(
									"_" + IDGenerator.getInstance().getNextID(),
									Type.DOUBLE,
									Float.floatToIntBits( Float.parseFloat( f ) )
								);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Constant ::= BOOLEANLITERAL 
            {
              CompileTimeDescriptor RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = new CompileTimeDescriptor(
									"_" + IDGenerator.getInstance().getNextID(),
									Type.BOOL,
									( b.equals( "true" ) ) ? 1 : 0 );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Constant ::= STRINGLITERAL 
            {
              CompileTimeDescriptor RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = new CompileTimeDescriptor(
									"_" + IDGenerator.getInstance().getNextID(),
									Type.STRINGLITERAL,
									s.substring( 1, s.length() - 1 ) + '\0'
								);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Constant ::= NULL 
            {
              CompileTimeDescriptor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompileTimeDescriptor( "_" + IDGenerator.getInstance().getNextID(), Type.NULL, 0 ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
