
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.Parser;

import java_cup.runtime.*;
import compiler.Scanner.MyScanner;
import compiler.CodeGenerator.SymbolTable.*;
import compiler.CodeGenerator.Exceptions.*;
import compiler.CodeGenerator.SymbolTable.Utility.*;
import compiler.CodeGenerator.*;
import compiler.CodeGenerator.CodeGen.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\004\000" +
    "\002\006\004\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\004\000\002\052\002\000\002\053\002\000\002\007\012" +
    "\000\002\007\010\000\002\010\004\000\002\010\002\000" +
    "\002\011\005\000\002\011\002\000\002\012\011\000\002" +
    "\013\004\000\002\013\002\000\002\014\005\000\002\014" +
    "\002\000\002\015\005\000\002\015\002\000\002\016\004" +
    "\000\002\016\002\000\002\017\004\000\002\017\004\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\002\000\002\021\007\000\002\022\004\000\002\022" +
    "\002\000\002\023\010\000\002\023\010\000\002\024\005" +
    "\000\002\025\004\000\002\025\003\000\002\027\004\000" +
    "\002\027\002\000\002\030\004\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\031\003\000\002\031\002\000\002\032\010\000" +
    "\002\033\004\000\002\033\002\000\002\034\007\000\002" +
    "\035\013\000\002\036\005\000\002\037\004\000\002\040" +
    "\004\000\002\054\002\000\002\041\011\000\002\055\002" +
    "\000\002\042\006\000\002\042\002\000\002\051\005\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\005\000\002\051\005\000\002\051" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\004\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\005\000\002\051\005\000\002\051" +
    "\004\000\002\051\005\000\002\051\005\000\002\051\004" +
    "\000\002\051\010\000\002\051\006\000\002\051\006\000" +
    "\002\051\006\000\002\051\006\000\002\050\003\000\002" +
    "\050\005\000\002\050\006\000\002\044\006\000\002\044" +
    "\010\000\002\045\004\000\002\045\002\000\002\043\005" +
    "\000\002\043\002\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\022\024\007\025\017\026\013\027\016\055" +
    "\014\056\023\057\020\101\021\001\002\000\006\037\075" +
    "\101\345\001\002\000\024\002\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\055\ufffa\056\ufffa\057\ufffa\101\ufffa\001\002" +
    "\000\024\002\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\055" +
    "\ufffd\056\ufffd\057\ufffd\101\ufffd\001\002\000\010\037\ufff7" +
    "\042\ufff7\101\ufff7\001\002\000\024\002\ufffe\024\007\025" +
    "\017\026\013\027\016\055\014\056\023\057\020\101\021" +
    "\001\002\000\004\063\341\001\002\000\004\002\340\001" +
    "\002\000\010\037\ufff5\042\ufff5\101\ufff5\001\002\000\004" +
    "\101\104\001\002\000\024\002\ufffb\024\ufffb\025\ufffb\026" +
    "\ufffb\027\ufffb\055\ufffb\056\ufffb\057\ufffb\101\ufffb\001\002" +
    "\000\010\037\ufff4\042\ufff4\101\ufff4\001\002\000\010\037" +
    "\ufff6\042\ufff6\101\ufff6\001\002\000\004\101\052\001\002" +
    "\000\010\037\ufff3\042\ufff3\101\ufff3\001\002\000\024\002" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\055\ufffc\056\ufffc" +
    "\057\ufffc\101\ufffc\001\002\000\004\101\024\001\002\000" +
    "\010\043\uffe7\060\025\061\uffe7\001\002\000\004\101\051" +
    "\001\002\000\006\043\uffe5\061\030\001\002\000\004\043" +
    "\036\001\002\000\004\101\031\001\002\000\006\043\uffe3" +
    "\062\032\001\002\000\004\101\034\001\002\000\004\043" +
    "\uffe6\001\002\000\006\043\uffe3\062\032\001\002\000\004" +
    "\043\uffe4\001\002\000\026\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\044\uffe1\055\uffdb\064\044\065\037\066\043\101\uffdb" +
    "\001\002\000\016\024\uffdd\025\uffdd\026\uffdd\027\uffdd\055" +
    "\uffdd\101\uffdd\001\002\000\004\044\050\001\002\000\026" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\044\uffe1\055\uffdb\064" +
    "\044\065\037\066\043\101\uffdb\001\002\000\016\024\007" +
    "\025\017\026\013\027\016\055\014\101\021\001\002\000" +
    "\016\024\uffdc\025\uffdc\026\uffdc\027\uffdc\055\uffdc\101\uffdc" +
    "\001\002\000\016\024\uffde\025\uffde\026\uffde\027\uffde\055" +
    "\uffde\101\uffde\001\002\000\026\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\044\uffe0\055\uffe0\064\uffe0\065\uffe0\066\uffe0\101" +
    "\uffe0\001\002\000\026\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\044\uffdf\055\uffdf\064\uffdf\065\uffdf\066\uffdf\101\uffdf\001" +
    "\002\000\004\044\uffe2\001\002\000\024\002\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\055\uffe9\056\uffe9\057\uffe9\101" +
    "\uffe9\001\002\000\006\043\uffe8\061\uffe8\001\002\000\004" +
    "\043\053\001\002\000\020\024\007\025\017\026\013\027" +
    "\016\044\uffd8\055\056\101\021\001\002\000\006\037\075" +
    "\101\077\001\002\000\004\044\076\001\002\000\004\101" +
    "\061\001\002\000\020\024\007\025\017\026\013\027\016" +
    "\044\uffd8\055\056\101\021\001\002\000\004\044\uffd9\001" +
    "\002\000\004\041\062\001\002\000\016\024\007\025\017" +
    "\026\013\027\016\042\uffec\101\021\001\002\000\006\037" +
    "\075\101\074\001\002\000\004\042\072\001\002\000\006" +
    "\042\uffea\062\066\001\002\000\014\024\007\025\017\026" +
    "\013\027\016\101\021\001\002\000\004\042\uffed\001\002" +
    "\000\006\042\uffea\062\066\001\002\000\004\042\uffeb\001" +
    "\002\000\004\063\073\001\002\000\020\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\044\uffd6\055\uffd6\101\uffd6\001\002\000" +
    "\010\042\ufff8\062\ufff8\063\ufff8\001\002\000\010\037\ufff2" +
    "\042\ufff2\101\ufff2\001\002\000\024\002\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\055\uffda\056\uffda\057\uffda\101\uffda" +
    "\001\002\000\004\041\100\001\002\000\016\024\007\025" +
    "\017\026\013\027\016\042\uffec\101\021\001\002\000\004" +
    "\042\102\001\002\000\004\063\103\001\002\000\020\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\044\uffd7\055\uffd7\101\uffd7" +
    "\001\002\000\004\041\105\001\002\000\016\024\007\025" +
    "\017\026\013\027\016\042\uffec\101\021\001\002\000\004" +
    "\042\107\001\002\000\004\043\110\001\002\000\102\005" +
    "\125\022\127\024\007\025\017\026\013\027\016\030\135" +
    "\031\117\032\116\033\156\034\141\041\146\043\110\044" +
    "\uffd1\045\130\046\114\047\137\050\131\051\147\052\144" +
    "\053\151\054\154\063\uffc6\067\133\071\150\072\124\073" +
    "\136\074\142\075\123\076\162\100\134\101\163\001\002" +
    "\000\034\002\uffee\024\uffee\025\uffee\026\uffee\027\uffee\044" +
    "\uffee\055\uffee\056\uffee\057\uffee\064\uffee\065\uffee\066\uffee" +
    "\101\uffee\001\002\000\074\005\uffca\022\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\041\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\054\uffca\063\uffca\067\uffca\070\uffca\071\uffca\072\uffca" +
    "\073\uffca\074\uffca\075\uffca\076\uffca\100\uffca\101\uffca\001" +
    "\002\000\004\063\337\001\002\000\004\041\335\001\002" +
    "\000\004\044\uffd3\001\002\000\050\004\uff90\005\uff90\006" +
    "\uff90\007\uff90\010\uff90\012\uff90\013\uff90\014\uff90\015\uff90" +
    "\016\uff90\017\uff90\020\uff90\021\uff90\023\uff90\035\uff90\036" +
    "\uff90\042\uff90\062\uff90\063\uff90\001\002\000\050\004\uff91" +
    "\005\uff91\006\uff91\007\uff91\010\uff91\012\uff91\013\uff91\014" +
    "\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\023\uff91" +
    "\035\uff91\036\uff91\042\uff91\062\uff91\063\uff91\001\002\000" +
    "\050\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\023\uffb7\035\uffb7\036\uffb7\042\uffb7\062\uffb7\063\uffb7" +
    "\001\002\000\074\005\uffcd\022\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\041\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\063\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd" +
    "\074\uffcd\075\uffcd\076\uffcd\100\uffcd\101\uffcd\001\002\000" +
    "\074\005\uffc9\022\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\041\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\063\uffc9" +
    "\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075" +
    "\uffc9\076\uffc9\100\uffc9\101\uffc9\001\002\000\004\063\334" +
    "\001\002\000\004\041\324\001\002\000\046\005\125\022" +
    "\127\030\135\031\117\032\116\033\156\034\141\041\146" +
    "\045\130\046\114\047\137\050\131\051\147\052\144\053" +
    "\151\054\154\100\134\101\165\001\002\000\004\044\322" +
    "\001\002\000\046\005\125\022\127\030\135\031\117\032" +
    "\116\033\156\034\141\041\146\045\130\046\114\047\137" +
    "\050\131\051\147\052\144\053\151\054\154\100\134\101" +
    "\165\001\002\000\004\041\317\001\002\000\004\041\312" +
    "\001\002\000\074\005\uffce\022\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\041\uffce\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054" +
    "\uffce\063\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce" +
    "\074\uffce\075\uffce\076\uffce\100\uffce\101\uffce\001\002\000" +
    "\004\041\303\001\002\000\050\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\010\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\023\uffb5\035\uffb5\036\uffb5" +
    "\042\uffb5\062\uffb5\063\uffb5\001\002\000\050\004\uff92\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\012\uff92\013\uff92\014\uff92" +
    "\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\023\uff92\035" +
    "\uff92\036\uff92\042\uff92\062\uff92\063\uff92\001\002\000\050" +
    "\005\125\022\127\030\135\031\117\032\116\033\156\034" +
    "\141\041\146\045\130\046\114\047\137\050\131\051\147" +
    "\052\144\053\151\054\154\063\uffc6\100\134\101\165\001" +
    "\002\000\004\101\300\001\002\000\074\005\uffc8\022\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\041\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\063\uffc8\067\uffc8\070\uffc8\071" +
    "\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\100\uffc8" +
    "\101\uffc8\001\002\000\050\004\uff8e\005\uff8e\006\uff8e\007" +
    "\uff8e\010\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e" +
    "\017\uff8e\020\uff8e\021\uff8e\023\uff8e\035\uff8e\036\uff8e\042" +
    "\uff8e\062\uff8e\063\uff8e\001\002\000\004\063\277\001\002" +
    "\000\074\005\uffcf\022\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\041\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\063" +
    "\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf" +
    "\075\uffcf\076\uffcf\100\uffcf\101\uffcf\001\002\000\004\041" +
    "\274\001\002\000\044\004\202\005\171\006\174\007\173" +
    "\010\175\012\205\013\177\014\200\015\207\016\201\017" +
    "\172\020\170\021\210\023\204\035\203\042\uffc7\063\uffc7" +
    "\001\002\000\046\005\125\022\127\030\135\031\117\032" +
    "\116\033\156\034\141\041\146\045\130\046\114\047\137" +
    "\050\131\051\147\052\144\053\151\054\154\100\134\101" +
    "\165\001\002\000\004\041\267\001\002\000\004\041\263" +
    "\001\002\000\004\041\260\001\002\000\052\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6\035" +
    "\uffb6\036\uffb6\042\uffb6\062\uffb6\063\uffb6\077\256\001\002" +
    "\000\102\005\125\022\127\024\007\025\017\026\013\027" +
    "\016\030\135\031\117\032\116\033\156\034\141\041\146" +
    "\043\110\044\uffd1\045\130\046\114\047\137\050\131\051" +
    "\147\052\144\053\151\054\154\063\uffc6\067\133\071\150" +
    "\072\124\073\136\074\142\075\123\076\162\100\134\101" +
    "\163\001\002\000\004\041\252\001\002\000\072\005\125" +
    "\022\127\030\135\031\117\032\116\033\156\034\141\041" +
    "\146\043\110\044\uffd1\045\130\046\114\047\137\050\131" +
    "\051\147\052\144\053\151\054\154\063\uffc6\067\133\071" +
    "\150\072\124\073\136\074\142\075\123\076\162\100\134" +
    "\101\165\001\002\000\050\004\uff8f\005\uff8f\006\uff8f\007" +
    "\uff8f\010\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f" +
    "\017\uff8f\020\uff8f\021\uff8f\023\uff8f\035\uff8f\036\uff8f\042" +
    "\uff8f\062\uff8f\063\uff8f\001\002\000\050\004\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\012\uffb4\013\uffb4\014\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\023\uffb4\035\uffb4" +
    "\036\uffb4\042\uffb4\062\uffb4\063\uffb4\001\002\000\074\005" +
    "\uffcb\022\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\041\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\063\uffcb\067\uffcb" +
    "\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076" +
    "\uffcb\100\uffcb\101\uffcb\001\002\000\074\005\uffcc\022\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\041\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\063\uffcc\067\uffcc\070\uffcc\071" +
    "\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\100\uffcc" +
    "\101\uffcc\001\002\000\004\041\237\001\002\000\052\004" +
    "\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\012\uff9b\013\uff9b" +
    "\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\023" +
    "\uff9b\035\uff9b\037\ufff3\041\164\063\uff9b\077\uff9b\101\ufff3" +
    "\001\002\000\050\005\125\022\127\030\135\031\117\032" +
    "\116\033\156\034\141\041\146\042\uff95\045\130\046\114" +
    "\047\137\050\131\051\147\052\144\053\151\054\154\100" +
    "\134\101\165\001\002\000\054\004\uff9b\005\uff9b\006\uff9b" +
    "\007\uff9b\010\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016" +
    "\uff9b\017\uff9b\020\uff9b\021\uff9b\023\uff9b\035\uff9b\036\uff9b" +
    "\041\164\042\uff9b\062\uff9b\063\uff9b\077\uff9b\001\002\000" +
    "\004\042\236\001\002\000\044\004\202\005\171\006\174" +
    "\007\173\010\175\012\205\013\177\014\200\015\207\016" +
    "\201\017\172\020\170\021\210\023\204\035\203\042\uff93" +
    "\062\206\001\002\000\046\005\125\022\127\030\135\031" +
    "\117\032\116\033\156\034\141\041\146\045\130\046\114" +
    "\047\137\050\131\051\147\052\144\053\151\054\154\100" +
    "\134\101\165\001\002\000\046\005\125\022\127\030\135" +
    "\031\117\032\116\033\156\034\141\041\146\045\130\046" +
    "\114\047\137\050\131\051\147\052\144\053\151\054\154" +
    "\100\134\101\165\001\002\000\046\005\125\022\127\030" +
    "\135\031\117\032\116\033\156\034\141\041\146\045\130" +
    "\046\114\047\137\050\131\051\147\052\144\053\151\054" +
    "\154\100\134\101\165\001\002\000\046\005\125\022\127" +
    "\030\135\031\117\032\116\033\156\034\141\041\146\045" +
    "\130\046\114\047\137\050\131\051\147\052\144\053\151" +
    "\054\154\100\134\101\165\001\002\000\046\005\125\022" +
    "\127\030\135\031\117\032\116\033\156\034\141\041\146" +
    "\045\130\046\114\047\137\050\131\051\147\052\144\053" +
    "\151\054\154\100\134\101\165\001\002\000\046\005\125" +
    "\022\127\030\135\031\117\032\116\033\156\034\141\041" +
    "\146\045\130\046\114\047\137\050\131\051\147\052\144" +
    "\053\151\054\154\100\134\101\165\001\002\000\004\042" +
    "\uff96\001\002\000\046\005\125\022\127\030\135\031\117" +
    "\032\116\033\156\034\141\041\146\045\130\046\114\047" +
    "\137\050\131\051\147\052\144\053\151\054\154\100\134" +
    "\101\165\001\002\000\046\005\125\022\127\030\135\031" +
    "\117\032\116\033\156\034\141\041\146\045\130\046\114" +
    "\047\137\050\131\051\147\052\144\053\151\054\154\100" +
    "\134\101\165\001\002\000\046\005\125\022\127\030\135" +
    "\031\117\032\116\033\156\034\141\041\146\045\130\046" +
    "\114\047\137\050\131\051\147\052\144\053\151\054\154" +
    "\100\134\101\165\001\002\000\046\005\125\022\127\030" +
    "\135\031\117\032\116\033\156\034\141\041\146\045\130" +
    "\046\114\047\137\050\131\051\147\052\144\053\151\054" +
    "\154\100\134\101\165\001\002\000\046\005\125\022\127" +
    "\030\135\031\117\032\116\033\156\034\141\041\146\045" +
    "\130\046\114\047\137\050\131\051\147\052\144\053\151" +
    "\054\154\100\134\101\165\001\002\000\004\101\216\001" +
    "\002\000\046\005\125\022\127\030\135\031\117\032\116" +
    "\033\156\034\141\041\146\045\130\046\114\047\137\050" +
    "\131\051\147\052\144\053\151\054\154\100\134\101\165" +
    "\001\002\000\046\005\125\022\127\030\135\031\117\032" +
    "\116\033\156\034\141\041\146\045\130\046\114\047\137" +
    "\050\131\051\147\052\144\053\151\054\154\100\134\101" +
    "\165\001\002\000\046\005\125\022\127\030\135\031\117" +
    "\032\116\033\156\034\141\041\146\045\130\046\114\047" +
    "\137\050\131\051\147\052\144\053\151\054\154\100\134" +
    "\101\165\001\002\000\046\005\125\022\127\030\135\031" +
    "\117\032\116\033\156\034\141\041\146\045\130\046\114" +
    "\047\137\050\131\051\147\052\144\053\151\054\154\100" +
    "\134\101\165\001\002\000\050\004\202\005\171\006\174" +
    "\007\173\010\175\012\205\013\177\014\200\015\207\016" +
    "\201\017\172\020\170\021\uffa5\023\204\035\203\036\uffa5" +
    "\042\uffa5\062\uffa5\063\uffa5\001\002\000\050\004\202\005" +
    "\171\006\174\007\173\010\175\012\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\023\204\035" +
    "\203\036\uffa9\042\uffa9\062\uffa9\063\uffa9\001\002\000\044" +
    "\004\202\005\171\006\174\007\173\010\175\012\205\013" +
    "\177\014\200\015\207\016\201\017\172\020\170\021\210" +
    "\023\204\035\203\042\uff93\062\206\001\002\000\004\042" +
    "\uff94\001\002\000\050\004\202\005\171\006\174\007\173" +
    "\010\175\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\023\204\035\203\036\uffac\042\uffac" +
    "\062\uffac\063\uffac\001\002\000\054\004\uff9a\005\uff9a\006" +
    "\uff9a\007\uff9a\010\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a" +
    "\016\uff9a\017\uff9a\020\uff9a\021\uff9a\023\uff9a\035\uff9a\036" +
    "\uff9a\041\217\042\uff9a\062\uff9a\063\uff9a\077\uff9a\001\002" +
    "\000\050\005\125\022\127\030\135\031\117\032\116\033" +
    "\156\034\141\041\146\042\uff95\045\130\046\114\047\137" +
    "\050\131\051\147\052\144\053\151\054\154\100\134\101" +
    "\165\001\002\000\004\042\221\001\002\000\050\004\uff97" +
    "\005\uff97\006\uff97\007\uff97\010\uff97\012\uff97\013\uff97\014" +
    "\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\023\uff97" +
    "\035\uff97\036\uff97\042\uff97\062\uff97\063\uff97\001\002\000" +
    "\042\004\202\005\171\006\174\007\173\010\175\012\205" +
    "\013\177\014\200\015\207\016\201\017\172\020\170\021" +
    "\210\023\204\035\203\036\223\001\002\000\052\004\uff99" +
    "\005\uff99\006\uff99\007\uff99\010\uff99\012\uff99\013\uff99\014" +
    "\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\023\uff99" +
    "\035\uff99\036\uff99\042\uff99\062\uff99\063\uff99\077\uff99\001" +
    "\002\000\050\004\uffb2\005\uffb2\006\174\007\173\010\175" +
    "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\023\204\035\203\036\uffb2\042\uffb2\062\uffb2" +
    "\063\uffb2\001\002\000\050\004\202\005\171\006\174\007" +
    "\173\010\175\012\205\013\177\014\200\015\207\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\023\204\035\203\036\uffa8\042" +
    "\uffa8\062\uffa8\063\uffa8\001\002\000\050\004\202\005\171" +
    "\006\174\007\173\010\175\012\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\023\204\035\203" +
    "\036\uffaa\042\uffaa\062\uffaa\063\uffaa\001\002\000\050\004" +
    "\202\005\171\006\174\007\173\010\175\012\uffab\013\uffab" +
    "\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\023" +
    "\204\035\203\036\uffab\042\uffab\062\uffab\063\uffab\001\002" +
    "\000\050\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\012" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\023\204\035\203\036\uffae\042\uffae\062\uffae\063" +
    "\uffae\001\002\000\050\004\uffb0\005\uffb0\006\uffb0\007\uffb0" +
    "\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\023\204\035\203\036\uffb0\042\uffb0" +
    "\062\uffb0\063\uffb0\001\002\000\050\004\uffaf\005\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\023\204\035\203\036" +
    "\uffaf\042\uffaf\062\uffaf\063\uffaf\001\002\000\050\004\202" +
    "\005\171\006\174\007\173\010\175\012\205\013\177\014" +
    "\200\015\207\016\uffa7\017\uffa7\020\uffa7\021\uffa7\023\204" +
    "\035\203\036\uffa7\042\uffa7\062\uffa7\063\uffa7\001\002\000" +
    "\050\004\uffb1\005\uffb1\006\174\007\173\010\175\012\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\023\204\035\203\036\uffb1\042\uffb1\062\uffb1\063\uffb1" +
    "\001\002\000\050\004\202\005\171\006\174\007\173\010" +
    "\175\012\205\013\177\014\200\015\207\016\201\017\172" +
    "\020\uffa6\021\uffa6\023\204\035\203\036\uffa6\042\uffa6\062" +
    "\uffa6\063\uffa6\001\002\000\050\004\uff98\005\uff98\006\uff98" +
    "\007\uff98\010\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016" +
    "\uff98\017\uff98\020\uff98\021\uff98\023\uff98\035\uff98\036\uff98" +
    "\042\uff98\062\uff98\063\uff98\001\002\000\046\005\125\022" +
    "\127\030\135\031\117\032\116\033\156\034\141\041\146" +
    "\045\130\046\114\047\137\050\131\051\147\052\144\053" +
    "\151\054\154\100\134\101\165\001\002\000\044\004\202" +
    "\005\171\006\174\007\173\010\175\012\205\013\177\014" +
    "\200\015\207\016\201\017\172\020\170\021\210\023\204" +
    "\035\203\042\uffbd\062\uffbd\001\002\000\006\042\uffb9\062" +
    "\242\001\002\000\046\005\125\022\127\030\135\031\117" +
    "\032\116\033\156\034\141\041\146\045\130\046\114\047" +
    "\137\050\131\051\147\052\144\053\151\054\154\100\134" +
    "\101\165\001\002\000\004\042\244\001\002\000\004\063" +
    "\245\001\002\000\074\005\uffbc\022\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\041\uffbc\043\uffbc\044\uffbc\045" +
    "\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\063\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073" +
    "\uffbc\074\uffbc\075\uffbc\076\uffbc\100\uffbc\101\uffbc\001\002" +
    "\000\044\004\202\005\171\006\174\007\173\010\175\012" +
    "\205\013\177\014\200\015\207\016\201\017\172\020\170" +
    "\021\210\023\204\035\203\042\uffbb\062\uffbb\001\002\000" +
    "\006\042\uffb9\062\242\001\002\000\004\042\uffba\001\002" +
    "\000\004\044\uffd2\001\002\000\046\005\125\022\127\030" +
    "\135\031\117\032\116\033\156\034\141\041\146\045\130" +
    "\046\114\047\137\050\131\051\147\052\144\053\151\054" +
    "\154\100\134\101\165\001\002\000\042\004\202\005\171" +
    "\006\174\007\173\010\175\012\205\013\177\014\200\015" +
    "\207\016\201\017\172\020\170\021\210\023\204\035\203" +
    "\042\254\001\002\000\050\004\uff9c\005\uff9c\006\uff9c\007" +
    "\uff9c\010\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\023\uff9c\035\uff9c\036\uff9c\042" +
    "\uff9c\062\uff9c\063\uff9c\001\002\000\004\044\uffd4\001\002" +
    "\000\046\005\125\022\127\030\135\031\117\032\116\033" +
    "\156\034\141\041\146\045\130\046\114\047\137\050\131" +
    "\051\147\052\144\053\151\054\154\100\134\101\165\001" +
    "\002\000\050\004\202\005\171\006\174\007\173\010\175" +
    "\012\205\013\177\014\200\015\207\016\201\017\172\020" +
    "\170\021\210\023\204\035\203\036\uffb8\042\uffb8\062\uffb8" +
    "\063\uffb8\001\002\000\046\005\125\022\127\030\135\031" +
    "\117\032\116\033\156\034\141\041\146\045\130\046\114" +
    "\047\137\050\131\051\147\052\144\053\151\054\154\100" +
    "\134\101\165\001\002\000\042\004\202\005\171\006\174" +
    "\007\173\010\175\012\205\013\177\014\200\015\207\016" +
    "\201\017\172\020\170\021\210\023\204\035\203\042\262" +
    "\001\002\000\050\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010" +
    "\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\023\uff9d\035\uff9d\036\uff9d\042\uff9d\062" +
    "\uff9d\063\uff9d\001\002\000\046\005\125\022\127\030\135" +
    "\031\117\032\116\033\156\034\141\041\146\045\130\046" +
    "\114\047\137\050\131\051\147\052\144\053\151\054\154" +
    "\100\134\101\165\001\002\000\042\004\202\005\171\006" +
    "\174\007\173\010\175\012\205\013\177\014\200\015\207" +
    "\016\201\017\172\020\170\021\210\023\204\035\203\042" +
    "\265\001\002\000\070\005\125\022\127\030\135\031\117" +
    "\032\116\033\156\034\141\041\146\043\110\045\130\046" +
    "\114\047\137\050\131\051\147\052\144\053\151\054\154" +
    "\063\uffc6\067\133\071\150\072\124\073\136\074\142\075" +
    "\123\076\162\100\134\101\165\001\002\000\074\005\uffc2" +
    "\022\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\041" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\054\uffc2\063\uffc2\067\uffc2\070" +
    "\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2" +
    "\100\uffc2\101\uffc2\001\002\000\046\005\125\022\127\030" +
    "\135\031\117\032\116\033\156\034\141\041\146\045\130" +
    "\046\114\047\137\050\131\051\147\052\144\053\151\054" +
    "\154\100\134\101\165\001\002\000\042\004\202\005\171" +
    "\006\174\007\173\010\175\012\205\013\177\014\200\015" +
    "\207\016\201\017\172\020\170\021\210\023\204\035\203" +
    "\042\271\001\002\000\050\004\uff9f\005\uff9f\006\uff9f\007" +
    "\uff9f\010\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f" +
    "\017\uff9f\020\uff9f\021\uff9f\023\uff9f\035\uff9f\036\uff9f\042" +
    "\uff9f\062\uff9f\063\uff9f\001\002\000\042\004\202\005\171" +
    "\006\174\007\173\010\175\012\205\013\177\014\200\015" +
    "\207\016\201\017\172\020\170\021\210\023\204\035\203" +
    "\042\273\001\002\000\050\004\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\023\uffb3\035\uffb3\036\uffb3\042" +
    "\uffb3\062\uffb3\063\uffb3\001\002\000\046\005\125\022\127" +
    "\030\135\031\117\032\116\033\156\034\141\041\146\045" +
    "\130\046\114\047\137\050\131\051\147\052\144\053\151" +
    "\054\154\100\134\101\165\001\002\000\042\004\202\005" +
    "\171\006\174\007\173\010\175\012\205\013\177\014\200" +
    "\015\207\016\201\017\172\020\170\021\210\023\204\035" +
    "\203\042\276\001\002\000\050\004\uff9e\005\uff9e\006\uff9e" +
    "\007\uff9e\010\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016" +
    "\uff9e\017\uff9e\020\uff9e\021\uff9e\023\uff9e\035\uff9e\036\uff9e" +
    "\042\uff9e\062\uff9e\063\uff9e\001\002\000\074\005\uffbf\022" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\041\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\063\uffbf\067\uffbf\070\uffbf" +
    "\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\100" +
    "\uffbf\101\uffbf\001\002\000\050\004\uffa1\005\uffa1\006\uffa1" +
    "\007\uffa1\010\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\020\uffa1\021\uffa1\023\uffa1\035\uffa1\036\uffa1" +
    "\042\uffa1\062\uffa1\063\uffa1\001\002\000\004\063\302\001" +
    "\002\000\074\005\uffc0\022\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\041\uffc0\043\uffc0\044\uffc0\045\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0" +
    "\063\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074" +
    "\uffc0\075\uffc0\076\uffc0\100\uffc0\101\uffc0\001\002\000\046" +
    "\005\125\022\127\030\135\031\117\032\116\033\156\034" +
    "\141\041\146\045\130\046\114\047\137\050\131\051\147" +
    "\052\144\053\151\054\154\100\134\101\165\001\002\000" +
    "\042\004\202\005\171\006\174\007\173\010\175\012\205" +
    "\013\177\014\200\015\207\016\201\017\172\020\170\021" +
    "\210\023\204\035\203\042\305\001\002\000\070\005\125" +
    "\022\127\030\135\031\117\032\116\033\156\034\141\041" +
    "\146\043\110\045\130\046\114\047\137\050\131\051\147" +
    "\052\144\053\151\054\154\063\uffc6\067\133\071\150\072" +
    "\124\073\136\074\142\075\123\076\162\100\134\101\165" +
    "\001\002\000\074\005\uffc3\022\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\041\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054" +
    "\uffc3\063\uffc3\067\uffc3\070\307\071\uffc3\072\uffc3\073\uffc3" +
    "\074\uffc3\075\uffc3\076\uffc3\100\uffc3\101\uffc3\001\002\000" +
    "\070\005\125\022\127\030\135\031\117\032\116\033\156" +
    "\034\141\041\146\043\110\045\130\046\114\047\137\050" +
    "\131\051\147\052\144\053\151\054\154\063\uffc6\067\133" +
    "\071\150\072\124\073\136\074\142\075\123\076\162\100" +
    "\134\101\165\001\002\000\074\005\uffc5\022\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\041\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\054\uffc5\063\uffc5\067\uffc5\070\uffc5\071\uffc5\072" +
    "\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\100\uffc5\101\uffc5" +
    "\001\002\000\074\005\uffc4\022\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\041\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054" +
    "\uffc4\063\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4" +
    "\074\uffc4\075\uffc4\076\uffc4\100\uffc4\101\uffc4\001\002\000" +
    "\046\005\125\022\127\030\135\031\117\032\116\033\156" +
    "\034\141\041\146\045\130\046\114\047\137\050\131\051" +
    "\147\052\144\053\151\054\154\100\134\101\165\001\002" +
    "\000\042\004\202\005\171\006\174\007\173\010\175\012" +
    "\205\013\177\014\200\015\207\016\201\017\172\020\170" +
    "\021\210\023\204\035\203\062\314\001\002\000\014\024" +
    "\007\025\017\026\013\027\016\101\021\001\002\000\006" +
    "\037\075\042\316\001\002\000\050\004\uffa0\005\uffa0\006" +
    "\uffa0\007\uffa0\010\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\021\uffa0\023\uffa0\035\uffa0\036" +
    "\uffa0\042\uffa0\062\uffa0\063\uffa0\001\002\000\004\042\320" +
    "\001\002\000\050\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\023\uffa3\035\uffa3\036\uffa3\042\uffa3\062" +
    "\uffa3\063\uffa3\001\002\000\050\004\uffa4\005\uffa4\006\uffa4" +
    "\007\uffa4\010\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\023\204\035\203\036\uffa4" +
    "\042\uffa4\062\uffa4\063\uffa4\001\002\000\122\002\uffd5\005" +
    "\uffd5\022\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\041\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\063\uffd5\064" +
    "\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5" +
    "\073\uffd5\074\uffd5\075\uffd5\076\uffd5\100\uffd5\101\uffd5\001" +
    "\002\000\050\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\023\204\035\203\036\uffad\042\uffad\062\uffad" +
    "\063\uffad\001\002\000\050\005\125\022\127\030\135\031" +
    "\117\032\116\033\156\034\141\041\146\045\130\046\114" +
    "\047\137\050\131\051\147\052\144\053\151\054\154\063" +
    "\uffc6\100\134\101\165\001\002\000\004\063\326\001\002" +
    "\000\046\005\125\022\127\030\135\031\117\032\116\033" +
    "\156\034\141\041\146\045\130\046\114\047\137\050\131" +
    "\051\147\052\144\053\151\054\154\100\134\101\165\001" +
    "\002\000\042\004\202\005\171\006\174\007\173\010\175" +
    "\012\205\013\177\014\200\015\207\016\201\017\172\020" +
    "\170\021\210\023\204\035\203\063\330\001\002\000\050" +
    "\005\125\022\127\030\135\031\117\032\116\033\156\034" +
    "\141\041\146\042\uffc6\045\130\046\114\047\137\050\131" +
    "\051\147\052\144\053\151\054\154\100\134\101\165\001" +
    "\002\000\004\042\332\001\002\000\070\005\125\022\127" +
    "\030\135\031\117\032\116\033\156\034\141\041\146\043" +
    "\110\045\130\046\114\047\137\050\131\051\147\052\144" +
    "\053\151\054\154\063\uffc6\067\133\071\150\072\124\073" +
    "\136\074\142\075\123\076\162\100\134\101\165\001\002" +
    "\000\074\005\uffc1\022\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\041\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\063" +
    "\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1" +
    "\075\uffc1\076\uffc1\100\uffc1\101\uffc1\001\002\000\074\005" +
    "\uffbe\022\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\041\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\063\uffbe\067\uffbe" +
    "\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076" +
    "\uffbe\100\uffbe\101\uffbe\001\002\000\004\042\336\001\002" +
    "\000\050\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\023\uffa2\035\uffa2\036\uffa2\042\uffa2\062\uffa2\063" +
    "\uffa2\001\002\000\074\005\uffd0\022\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\041\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\054\uffd0\063\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073" +
    "\uffd0\074\uffd0\075\uffd0\076\uffd0\100\uffd0\101\uffd0\001\002" +
    "\000\004\002\001\001\002\000\120\002\ufff9\005\ufff9\022" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\041\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\057\ufff9\063\ufff9\064\ufff9\065" +
    "\ufff9\066\ufff9\067\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9" +
    "\075\ufff9\076\ufff9\100\ufff9\101\ufff9\001\002\000\024\002" +
    "\ufffe\024\007\025\017\026\013\027\016\055\014\056\023" +
    "\057\020\101\021\001\002\000\004\002\000\001\002\000" +
    "\004\002\uffff\001\002\000\006\041\346\063\ufff8\001\002" +
    "\000\016\024\ufff1\025\ufff1\026\ufff1\027\ufff1\042\ufff1\101" +
    "\ufff1\001\002\000\016\024\007\025\017\026\013\027\016" +
    "\042\uffec\101\021\001\002\000\004\042\ufff0\001\002\000" +
    "\004\042\352\001\002\000\004\043\110\001\002\000\034" +
    "\002\uffef\024\uffef\025\uffef\026\uffef\027\uffef\044\uffef\055" +
    "\uffef\056\uffef\057\uffef\064\uffef\065\uffef\066\uffef\101\uffef" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\022\002\011\004\007\005\005\006\010\007" +
    "\021\012\014\021\004\046\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\342\004\341\005\005\006\010\007\021\012\014" +
    "\021\004\046\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\025\001\001\000\002\001\001\000\004\014\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\034\001\001\000\002\001\001\000\010\016\037\017\040" +
    "\020\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\046\017\040\020\041\001\001\000\012\005\044" +
    "\006\010\007\045\046\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\054\023\056\046\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\057\023\056\046\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\064\010\063\046\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\066\001\001" +
    "\000\006\006\067\046\062\001\001\000\002\001\001\000" +
    "\004\011\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\064\010\100" +
    "\046\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\064\010\105" +
    "\046\062\001\001\000\002\001\001\000\004\024\110\001" +
    "\001\000\050\005\152\006\010\024\137\025\125\027\114" +
    "\030\154\031\112\032\142\034\131\035\120\036\111\037" +
    "\160\040\157\041\121\044\156\046\062\047\117\050\151" +
    "\051\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\044\156\047\117\050\151\051\322\001\001\000" +
    "\002\001\001\000\012\044\156\047\117\050\151\051\320" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\031\300\044\156\047\117\050\151\051\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\044\156\047\117\050\151\051\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\005\152\006\010\024\137" +
    "\025\254\027\114\030\154\031\112\032\142\034\131\035" +
    "\120\036\111\037\160\040\157\041\121\044\156\046\062" +
    "\047\117\050\151\051\144\001\001\000\002\001\001\000" +
    "\040\024\137\027\250\030\154\031\112\032\142\034\131" +
    "\035\120\036\111\037\160\040\157\041\121\044\156\047" +
    "\117\050\151\051\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\044\156\045\165\047\117" +
    "\050\151\051\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\175\001\001\000\012\044\156\047\117" +
    "\050\151\051\234\001\001\000\012\044\156\047\117\050" +
    "\151\051\233\001\001\000\012\044\156\047\117\050\151" +
    "\051\232\001\001\000\012\044\156\047\117\050\151\051" +
    "\231\001\001\000\012\044\156\047\117\050\151\051\230" +
    "\001\001\000\012\044\156\047\117\050\151\051\227\001" +
    "\001\000\002\001\001\000\012\044\156\047\117\050\151" +
    "\051\226\001\001\000\012\044\156\047\117\050\151\051" +
    "\225\001\001\000\012\044\156\047\117\050\151\051\224" +
    "\001\001\000\012\044\156\047\117\050\151\051\223\001" +
    "\001\000\012\044\156\047\117\050\151\051\221\001\001" +
    "\000\002\001\001\000\012\044\156\047\117\050\151\051" +
    "\214\001\001\000\012\044\156\047\117\050\151\051\212" +
    "\001\001\000\012\044\156\047\117\050\151\051\211\001" +
    "\001\000\012\044\156\047\117\050\151\051\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\044\156\045\217\047\117\050\151\051\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\044\156" +
    "\047\117\050\151\051\237\001\001\000\004\054\240\001" +
    "\001\000\004\042\242\001\001\000\012\044\156\047\117" +
    "\050\151\051\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\246\001\001\000\004" +
    "\042\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\044\156\047\117\050\151\051\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\044" +
    "\156\047\117\050\151\051\256\001\001\000\002\001\001" +
    "\000\012\044\156\047\117\050\151\051\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\044\156\047\117" +
    "\050\151\051\263\001\001\000\002\001\001\000\036\024" +
    "\137\030\265\031\112\032\142\034\131\035\120\036\111" +
    "\037\160\040\157\041\121\044\156\047\117\050\151\051" +
    "\144\001\001\000\002\001\001\000\012\044\156\047\117" +
    "\050\151\051\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\044\156" +
    "\047\117\050\151\051\274\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\044\156\047\117\050" +
    "\151\051\303\001\001\000\002\001\001\000\036\024\137" +
    "\030\305\031\112\032\142\034\131\035\120\036\111\037" +
    "\160\040\157\041\121\044\156\047\117\050\151\051\144" +
    "\001\001\000\004\033\307\001\001\000\036\024\137\030" +
    "\310\031\112\032\142\034\131\035\120\036\111\037\160" +
    "\040\157\041\121\044\156\047\117\050\151\051\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\044\156" +
    "\047\117\050\151\051\312\001\001\000\002\001\001\000" +
    "\004\046\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\031\324\044\156" +
    "\047\117\050\151\051\144\001\001\000\002\001\001\000" +
    "\012\044\156\047\117\050\151\051\326\001\001\000\002" +
    "\001\001\000\014\031\330\044\156\047\117\050\151\051" +
    "\144\001\001\000\002\001\001\000\036\024\137\030\332" +
    "\031\112\032\142\034\131\035\120\036\111\037\160\040" +
    "\157\041\121\044\156\047\117\050\151\051\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\343\004\341\005\005\006\010\007" +
    "\021\012\014\021\004\046\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\346\001" +
    "\001\000\010\006\064\010\347\046\062\001\001\000\004" +
    "\053\350\001\001\000\002\001\001\000\004\024\352\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }


	private MyScanner scanner;
	public parser (MyScanner scanner){
		this.scanner = scanner;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Decl DeclStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclStar ::= Decl DeclStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VariableDecl ::= Variable SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Variable ::= Type IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if ( ParserPhase.getInstance().getPhase() == 0 ) {
								String name = IDGenerator.getInstance().getNextID();
								Type type = Descriptor.getType( t );
								SymbolTable.getInstance().getSymbolTable().addEntry(
									id,
									new Descriptor( name, type, null )
								);
								CodeGen.getInstance().addToData( name, Type.getMipsType( type ), Integer.toString( 0 ) );
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= INT 
            {
              String RESULT =null;
		 RESULT = "INT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT = "DOUBLE"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= BOOL 
            {
              String RESULT =null;
		 RESULT = "BOOL"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= STRING 
            {
              String RESULT =null;
		 RESULT = "STRING"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= IDENTIFIER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= Type OPENCLOSEBRACKET 
            {
              String RESULT =null;
		 RESULT = "ARRAY"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 0 ) {
								SymbolTable.getInstance().makeNextAndSwitch( name );
							}
							else if ( phase == 1 ) {
								CodeGen.getInstance().addToText( name + ":\n", true );
								SymbolTable.getInstance().switchToNext();
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 0 )
								SymbolTable.getInstance().makeNextAndSwitch();
							else if ( phase == 1 )
								SymbolTable.getInstance().switchToNext();
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FunctionDecl ::= Type IDENTIFIER OPENPARENTHESIS NT$0 Formals NT$1 CLOSEPARENTHESIS StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
							SymbolTable.getInstance().goBack();
							SymbolTable.getInstance().goBack();
							if ( ParserPhase.getInstance().getPhase() == 1 )
								CodeGen.getInstance().addToText( "" );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FunctionDecl ::= VOID IDENTIFIER OPENPARENTHESIS Formals CLOSEPARENTHESIS StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Formals ::= Variable CommaVariables 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Formals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CommaVariables ::= COMMA Variable CommaVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaVariables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CommaVariables ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaVariables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassDecl ::= CLASS IDENTIFIER ClassDeclExtends ClassDeclImplements OPENCURLYBRACES FieldStar CLOSECURLYBRACES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassDeclExtends ::= EXTENDS IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclExtends",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDeclExtends ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclExtends",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDeclImplements ::= IMPLEMENTS IDENTIFIER CommaIdentifiers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclImplements",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDeclImplements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclImplements",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CommaIdentifiers ::= COMMA IDENTIFIER CommaIdentifiers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaIdentifiers",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CommaIdentifiers ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CommaIdentifiers",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FieldStar ::= Field FieldStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FieldStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Field ::= AccessMode VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Field ::= AccessMode FunctionDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AccessMode ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AccessMode ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AccessMode ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AccessMode ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InterfaceDecl ::= INTERFACE IDENTIFIER OPENCURLYBRACES PrototypeStar CLOSECURLYBRACES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PrototypeStar ::= Prototype PrototypeStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PrototypeStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Prototype ::= Type IDENTIFIER OPENPARENTHESIS Formals CLOSEPARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Prototype ::= VOID IDENTIFIER OPENPARENTHESIS Formals CLOSEPARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StmtBlock ::= OPENCURLYBRACES InsideStmtBlock CLOSECURLYBRACES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtBlock",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // InsideStmtBlock ::= VariableDecl InsideStmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InsideStmtBlock",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // InsideStmtBlock ::= StmtStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InsideStmtBlock",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StmtStar ::= Stmt StmtStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StmtStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stmt ::= ExprPrime SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stmt ::= ContinueStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExprPrime ::= Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprPrime",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExprPrime ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprPrime",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IfStmt ::= IF OPENPARENTHESIS Expr CLOSEPARENTHESIS Stmt ElsePrime 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ElsePrime ::= ELSE Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElsePrime",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ElsePrime ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElsePrime",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WhileStmt ::= WHILE OPENPARENTHESIS Expr CLOSEPARENTHESIS Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ForStmt ::= FOR OPENPARENTHESIS ExprPrime SEMICOLON Expr SEMICOLON ExprPrime CLOSEPARENTHESIS Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ReturnStmt ::= RETURN ExprPrime SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BreakStmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ContinueStmt ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContinueStmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								PrintCodeGen.getInstance().cgen();
							}
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PrintStmt ::= PRINT OPENPARENTHESIS Expr NT$2 PrintCommaExpr CLOSEPARENTHESIS SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$3 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								PrintCodeGen.getInstance().cgen();
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PrintCommaExpr ::= COMMA Expr NT$3 PrintCommaExpr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintCommaExpr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PrintCommaExpr ::= 
            {
              Object RESULT =null;
		
							PrintCodeGen.getInstance().printEnter();
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintCommaExpr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= LValue ASSIGN Expr 
            {
              Descriptor RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor lv = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								SemanticStack.getInstance().pushDescriptor( lv );
								AssignmentCodeGen.getInstance().cgen();
							}
							RESULT = new Descriptor( "", Type.DUMMY, 0 );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Constant 
            {
              Descriptor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor c = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SymbolTable.getInstance().getSymbolTable().addEntry( c.getName(), c );
								CodeGen.getInstance().addToData( c.getName(), Type.getMipsType( c.getType() ), c.getValue().toString() );
							}
							RESULT = c;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= LValue 
            {
              Descriptor RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor lv = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= THIS 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Call 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= OPENPARENTHESIS Expr CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr PLUS Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e1 );
								SemanticStack.getInstance().pushDescriptor( e2 );
								PlusCodeGen.getInstance().cgen();
								Descriptor temp = SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr MINUS Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e1 );
								SemanticStack.getInstance().pushDescriptor( e2 );
								MinusCodeGen.getInstance().cgen();
								Descriptor temp = SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr MULTIPLY Expr 
            {
              Descriptor RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Descriptor e1 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Descriptor e2 = (Descriptor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e1 );
								SemanticStack.getInstance().pushDescriptor( e2 );
								MultiplyCodeGen.getInstance().cgen();
								Descriptor temp = SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr DIVIDE Expr 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr MOD Expr 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= MINUS Expr 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr LESS Expr 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr LESSEQUAL Expr 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr GREATER Expr 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr GREATEREQUAL Expr 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr EQUAL Expr 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr NOTEQUAL Expr 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr AND Expr 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr OR Expr 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= NOT Expr 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= READINTEGER OPENPARENTHESIS CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= READLINE OPENPARENTHESIS CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= NEW IDENTIFIER 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= NEWARRAY OPENPARENTHESIS Expr COMMA Type CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= ITOD OPENPARENTHESIS Expr CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= DTOI OPENPARENTHESIS Expr CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= ITOB OPENPARENTHESIS Expr CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= BTOI OPENPARENTHESIS Expr CLOSEPARENTHESIS 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LValue ::= IDENTIFIER 
            {
              Descriptor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = SymbolTable.getInstance().getSymbolTable().getDescriptor( id );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LValue ::= Expr DOT IDENTIFIER 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LValue ::= Expr OPENBRACKET Expr CLOSEBRACKET 
            {
              Descriptor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Call ::= IDENTIFIER OPENPARENTHESIS Actuals CLOSEPARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Call ::= Expr DOT IDENTIFIER OPENPARENTHESIS Actuals CLOSEPARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Actuals ::= Expr ActualsCommaExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ActualsCommaExpr ::= COMMA Expr ActualsCommaExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActualsCommaExpr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ActualsCommaExpr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActualsCommaExpr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Constant ::= DECIMAL 
            {
              Descriptor RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = new Descriptor( "_" + IDGenerator.getInstance().getNextID(), Type.INT, Integer.parseInt( d ) );
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Constant ::= FLOATINGPOINT 
            {
              Descriptor RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Descriptor( "_" + IDGenerator.getInstance().getNextID(), Type.DOUBLE, f ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Constant ::= BOOLEANLITERAL 
            {
              Descriptor RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Descriptor( "_" + IDGenerator.getInstance().getNextID(), Type.BOOL, b ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Constant ::= STRINGLITERAL 
            {
              Descriptor RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Descriptor( "_" + IDGenerator.getInstance().getNextID(), Type.STRING, s ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Constant ::= NULL 
            {
              Descriptor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Descriptor( "_" + IDGenerator.getInstance().getNextID(), Type.NULL, 0 ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
