package compiler;
import java_cup.runtime.*;


parser code {:
	// defining scanner here
	private MyScanner scanner;
	public parser (MyScanner scanner){
		this.scanner = scanner;
	}
:}
scan with {: return scanner.next_token(); :}
// defining terminals here
terminal            PLUS, MINUS, MULTIPLY, DIVIDE, MOD, UMINUS,
					LESS, LESSEQUAL, GREATER, GREATEREQUAL, EQUAL, NOTEQUAL, AND, OR, NOT, DOT,
					INT, DOUBLE, BOOL, STRING ,OPENBRACKET, CLOSEBRACKET, OPENCLOSEBRACKET, WS, OPENPARENTHESIS,
					READINTEGER, READLINE, NEW, NEWARRAY, ITOD, DTOI, ITOB, BTOI,
					DECIMAL, FLOATINGPOINT, BOOLEANLITERAL, NULL,
					CLOSEPARENTHESIS, OPENCURLYBRACES, CLOSECURLYBRACES, VOID, CLASS, INTERFACE,
					EXTENDS, IMPLEMENTS, COMMA, SEMICOLON, PRIVATE, PROTECTED, PUBLIC, IF, ELSE, WHILE, FOR, RETURN,
					BREAK, CONTINUE, PRINT, ASSIGN, THIS;
terminal    String  IDENTIFIER, STRINGLITERAL;
// defining nonterminals
nonterminal         Program, DeclStar, Decl, VariableDecl, Variable, Type, FunctionDecl, Formals, CommaVariables,
					ClassDecl, ClassDeclExtends, ClassDeclImplements, CommaIdentifiers, FieldStar, Field,
					AccessMode, InterfaceDecl, PrototypeStar, Prototype, StmtBlock, InsideStmtBlock, VariableDeclStar, StmtStar,
					Stmt, ExprPrime, IfStmt, ElsePrime, WhileStmt, ForStmt, ReturnStmt, BreakStmt, ContinueStmt, PrintStmt,
					CommaExpr, Expr, LValue, Call, Actuals, Constant;
// defining precedences
precedence left     ELSE;
precedence right    ASSIGN;
precedence left     OR;
precedence left     AND;
precedence left     EQUAL, NOTEQUAL;
precedence left     LESS, LESSEQUAL, GREATER, GREATEREQUAL;
precedence left     PLUS, MINUS;
precedence left     MULTIPLY, DIVIDE, MOD;
precedence right    NOT, UMINUS;
precedence left     DOT, OPENBRACKET;
precedence left     OPENPARENTHESIS;

start with Program;

Program ::=             Decl DeclStar;

DeclStar ::=            Decl DeclStar
						| /*epsilon*/
						;

Decl ::=                VariableDecl
						| FunctionDecl
						| ClassDecl
						| InterfaceDecl
						;

VariableDecl ::=        Variable SEMICOLON;

Variable ::=            Type IDENTIFIER;

Type ::=                INT
						| DOUBLE
						| BOOL
						| STRING
						| IDENTIFIER
						| Type OPENCLOSEBRACKET
						;

FunctionDecl ::=        Type IDENTIFIER OPENPARENTHESIS Formals CLOSEPARENTHESIS StmtBlock
						| VOID IDENTIFIER OPENPARENTHESIS Formals CLOSEPARENTHESIS StmtBlock
						;

Formals ::=             Variable CommaVariables
						| /*epsilon*/
						;
CommaVariables ::=      COMMA Variable CommaVariables
						| /*epsilon*/
						;

ClassDecl ::=           CLASS IDENTIFIER ClassDeclExtends ClassDeclImplements OPENCURLYBRACES FieldStar CLOSECURLYBRACES;
ClassDeclExtends ::=    EXTENDS IDENTIFIER
						| /*epsilon*/
						;
ClassDeclImplements ::= IMPLEMENTS IDENTIFIER CommaIdentifiers
						| /*epsilon*/
						;
CommaIdentifiers ::=    COMMA IDENTIFIER CommaIdentifiers
						| /*epsilon*/
						;
FieldStar ::=           Field FieldStar
						| /*epsilon*/
						;

Field ::=               AccessMode VariableDecl
						| AccessMode FunctionDecl
						;

AccessMode ::=          PRIVATE
						| PROTECTED
						| PUBLIC
						| /*epsilon*/
						;

InterfaceDecl ::=       INTERFACE IDENTIFIER OPENCURLYBRACES PrototypeStar CLOSECURLYBRACES;
PrototypeStar ::=       Prototype PrototypeStar
						| /*epsilon*/
						;

Prototype ::=           Type IDENTIFIER OPENPARENTHESIS Formals CLOSEPARENTHESIS SEMICOLON
						| VOID IDENTIFIER OPENPARENTHESIS Formals CLOSEPARENTHESIS SEMICOLON
						;

//StmtBlock ::=           OPENCURLYBRACES VariableDeclStar StmtStar CLOSECURLYBRACES;
//VariableDeclStar ::=    VariableDecl VariableDeclStar
//						| /*epsilon*/
//						;
//StmtStar ::=            Stmt StmtStar
//						| /*epsilon*/
//						;

StmtBlock ::=           OPENCURLYBRACES InsideStmtBlock CLOSECURLYBRACES;
InsideStmtBlock ::=     VariableDecl InsideStmtBlock
						| StmtStar
						;
StmtStar ::=            Stmt StmtStar
						| /*epsilon*/
						;

Stmt ::=                ExprPrime SEMICOLON
						| IfStmt
						| WhileStmt
						| ForStmt
						| BreakStmt
						| ContinueStmt
						| ReturnStmt
						| PrintStmt
						| StmtBlock
						;

ExprPrime ::=           Expr
						| /*epsilon*/
						;

IfStmt ::=              IF OPENPARENTHESIS Expr CLOSEPARENTHESIS Stmt ElsePrime;
ElsePrime ::=           ELSE Stmt
						| /*epsilon*/
						;

WhileStmt ::=           WHILE OPENPARENTHESIS Expr CLOSEPARENTHESIS Stmt;

ForStmt ::=             FOR OPENPARENTHESIS ExprPrime SEMICOLON Expr SEMICOLON ExprPrime CLOSEPARENTHESIS Stmt;

ReturnStmt ::=          RETURN ExprPrime SEMICOLON;

BreakStmt ::=           BREAK SEMICOLON;

ContinueStmt ::=        CONTINUE SEMICOLON;

PrintStmt ::=           PRINT OPENPARENTHESIS Expr CommaExpr CLOSEPARENTHESIS SEMICOLON;

CommaExpr ::=           COMMA CommaExpr
						| /*epsilon*/
						;

Expr ::=                LValue ASSIGN Expr
						| Constant
						| LValue
						| THIS
						| Call
						| OPENPARENTHESIS Expr CLOSEPARENTHESIS
						| Expr PLUS Expr
						| Expr MINUS Expr
						| Expr MULTIPLY Expr
						| Expr DIVIDE Expr
						| Expr MOD Expr
						| MINUS Expr %prec UMINUS
						| Expr LESS Expr
						| Expr LESSEQUAL Expr
						| Expr GREATER Expr
						| Expr GREATEREQUAL Expr
						| Expr EQUAL Expr
						| Expr NOTEQUAL Expr
						| Expr AND Expr
						| Expr OR Expr
						| NOT Expr
						| READINTEGER OPENPARENTHESIS CLOSEPARENTHESIS
						| READLINE OPENPARENTHESIS CLOSEPARENTHESIS
						| NEW IDENTIFIER
						| NEWARRAY OPENPARENTHESIS Expr COMMA Type CLOSEPARENTHESIS
						| ITOD OPENPARENTHESIS Expr CLOSEPARENTHESIS
						| DTOI OPENPARENTHESIS Expr CLOSEPARENTHESIS
						| ITOB OPENPARENTHESIS Expr CLOSEPARENTHESIS
						| BTOI OPENPARENTHESIS Expr CLOSEPARENTHESIS
						;

LValue ::=              IDENTIFIER
						| Expr DOT IDENTIFIER
						| Expr OPENBRACKET Expr CLOSEBRACKET
						;

Call ::=                IDENTIFIER OPENPARENTHESIS Actuals CLOSEPARENTHESIS
						| Expr DOT IDENTIFIER OPENPARENTHESIS Actuals CLOSEPARENTHESIS
						;

Actuals ::=             Expr CommaExpr
						| /*epsilon*/
						;

Constant ::=            DECIMAL
						| FLOATINGPOINT
						| BOOLEANLITERAL
						| STRINGLITERAL
						| NULL
						;

